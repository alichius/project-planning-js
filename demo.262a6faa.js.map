{"version":3,"sources":["../../node_modules/shallowequal/index.js","../index.ts","../../node_modules/svg.js/dist/svg.js","../main/worker-interface.ts","../main/bundler-worker-factory.ts","../main/api-types.ts","../main/minheap.ts","../main/scheduling.ts","../main/scheduling-async.ts","../main/index.ts","demo.ts"],"names":[],"mappings":"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","file":"demo.262a6faa.js","sourceRoot":"../../src/demo","sourcesContent":["//\n\nmodule.exports = function shallowEqual(objA, objB, compare, compareContext) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== \"object\" || !objA || typeof objB !== \"object\" || !objB) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n\n  // Test for A's keys different from B.\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n\n    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (ret === false || (ret === void 0 && valueA !== valueB)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","// An augmented AVL Tree where each node maintains a list of records and their search intervals.\n// Record is composed of an interval and its underlying data, sent by a client. This allows the\n// interval tree to have the same interval inserted multiple times, as long its data is different.\n// Both insertion and deletion require O(log n) time. Searching requires O(k*logn) time, where `k`\n// is the number of intervals in the output list.\n\nimport isSame = require('shallowequal')\n\nexport interface Interval {\n  readonly low: number\n  readonly high: number\n}\n\nfunction height<T extends Interval>(node?: Node<T>) {\n  if (node === undefined) {\n    return -1\n  } else {\n    return node.height\n  }\n}\n\nexport class Node<T extends Interval> {\n  public key: number\n  public max: number\n  public records: T[] = []\n  public parent?: Node<T>\n  public height = 0\n  public left?: Node<T>\n  public right?: Node<T>\n\n  constructor(public intervalTree: IntervalTree<T>, record: T) {\n    this.key = record.low\n    this.max = record.high\n\n    // Save the array of all records with the same key for this node\n    this.records.push(record)\n  }\n\n  // Gets the highest record.high value for this node\n  public getNodeHigh() {\n    let high = this.records[0].high\n\n    for (let i = 1; i < this.records.length; i++) {\n      if (this.records[i].high > high) {\n        high = this.records[i].high\n      }\n    }\n\n    return high\n  }\n\n  // Updates height value of the node. Called during insertion, rebalance, removal\n  public updateHeight() {\n    this.height = Math.max(height(this.left), height(this.right)) + 1\n  }\n\n  // Updates the max value of all the parents after inserting into already existing node, as well as\n  // removing the node completely or removing the record of an already existing node. Starts with\n  // the parent of an affected node and bubbles up to root\n  public updateMaxOfParents() {\n    if (this === undefined) {\n      return\n    }\n\n    const thisHigh = this.getNodeHigh()\n    if (this.left !== undefined && this.right !== undefined) {\n      this.max = Math.max(Math.max(this.left.max, this.right.max), thisHigh)\n    } else if (this.left !== undefined && this.right === undefined) {\n      this.max = Math.max(this.left.max, thisHigh)\n    } else if (this.left === undefined && this.right !== undefined) {\n      this.max = Math.max(this.right.max, thisHigh)\n    } else {\n      this.max = thisHigh\n    }\n\n    if (this.parent) {\n      this.parent.updateMaxOfParents()\n    }\n  }\n\n  /*\n  Left-Left case:\n\n         z                                      y\n        / \\                                   /   \\\n       y   T4      Right Rotate (z)          x     z\n      / \\          - - - - - - - - ->       / \\   / \\\n     x   T3                                T1 T2 T3 T4\n    / \\\n  T1   T2\n\n  Left-Right case:\n\n       z                               z                           x\n      / \\                             / \\                        /   \\\n     y   T4  Left Rotate (y)         x  T4  Right Rotate(z)     y     z\n    / \\      - - - - - - - - ->     / \\      - - - - - - - ->  / \\   / \\\n  T1   x                           y  T3                      T1 T2 T3 T4\n      / \\                         / \\\n    T2   T3                      T1 T2\n  */\n\n  // Handles Left-Left case and Left-Right case after rebalancing AVL tree\n  private _updateMaxAfterRightRotate() {\n    const parent = this.parent as Node<T>\n    const left = parent.left as Node<T>\n    // Update max of left sibling (x in first case, y in second)\n    const thisParentLeftHigh = left.getNodeHigh()\n    if (left.left === undefined && left.right !== undefined) {\n      left.max = Math.max(thisParentLeftHigh, left.right.max)\n    } else if (left.left !== undefined && left.right === undefined) {\n      left.max = Math.max(thisParentLeftHigh, left.left.max)\n    } else if (left.left === undefined && left.right === undefined) {\n      left.max = thisParentLeftHigh\n    } else {\n      left.max = Math.max(Math.max((left.left as Node<T>).max,\n          (left.right as Node<T>).max), thisParentLeftHigh)\n    }\n\n    // Update max of itself (z)\n    const thisHigh = this.getNodeHigh()\n    if (this.left === undefined && this.right !== undefined) {\n      this.max = Math.max(thisHigh, this.right.max)\n    } else if (this.left !== undefined && this.right === undefined) {\n      this.max = Math.max(thisHigh, this.left.max)\n    } else if (this.left === undefined && this.right === undefined) {\n      this.max = thisHigh\n    } else {\n      this.max = Math.max(Math.max((this.left as Node<T>).max, (this.right as Node<T>).max), thisHigh)\n    }\n\n    // Update max of parent (y in first case, x in second)\n    parent.max = Math.max(Math.max((parent.left as Node<T>).max, (parent.right as Node<T>).max),\n        parent.getNodeHigh())\n  }\n\n  /*\n  Right-Right case:\n\n    z                               y\n   / \\                            /   \\\n  T1  y     Left Rotate(z)       z     x\n     / \\   - - - - - - - ->     / \\   / \\\n    T2  x                      T1 T2 T3 T4\n       / \\\n      T3 T4\n\n  Right-Left case:\n\n     z                            z                            x\n    / \\                          / \\                         /   \\\n   T1  y   Right Rotate (y)     T1  x      Left Rotate(z)   z     y\n      / \\  - - - - - - - - ->      / \\   - - - - - - - ->  / \\   / \\\n     x  T4                        T2  y                   T1 T2 T3 T4\n    / \\                              / \\\n  T2   T3                           T3 T4\n  */\n\n  // Handles Right-Right case and Right-Left case in rebalancing AVL tree\n  private _updateMaxAfterLeftRotate() {\n    const parent = this.parent as Node<T>\n    const right = parent.right as Node<T>\n    // Update max of right sibling (x in first case, y in second)\n    const thisParentRightHigh = right.getNodeHigh()\n    if (right.left === undefined && right.right !== undefined) {\n      right.max = Math.max(thisParentRightHigh, (right.right as Node<T>).max)\n    } else if (right.left !== undefined && right.right === undefined) {\n      right.max = Math.max(thisParentRightHigh, (right.left as Node<T>).max)\n    } else if (right.left === undefined && right.right === undefined) {\n      right.max = thisParentRightHigh\n    } else {\n      right.max = Math.max(Math.max((right.left as Node<T>).max,\n          (right.right as Node<T>).max), thisParentRightHigh)\n    }\n\n    // Update max of itself (z)\n    const thisHigh = this.getNodeHigh()\n    if (this.left === undefined && this.right !== undefined) {\n      this.max = Math.max(thisHigh, (this.right as Node<T>).max)\n    } else if (this.left !== undefined && this.right === undefined) {\n      this.max = Math.max(thisHigh, (this.left as Node<T>).max)\n    } else if (this.left === undefined && this.right === undefined) {\n      this.max = thisHigh\n    } else {\n      this.max = Math.max(Math.max((this.left as Node<T>).max, (this.right as Node<T>).max), thisHigh)\n    }\n\n    // Update max of parent (y in first case, x in second)\n    parent.max = Math.max(Math.max((parent.left as Node<T>).max, right.max),\n        parent.getNodeHigh())\n  }\n\n  private _leftRotate() {\n    const rightChild = this.right as Node<T>\n    rightChild.parent = this.parent\n\n    if (rightChild.parent === undefined) {\n      this.intervalTree.root = rightChild\n    } else {\n      if ((rightChild.parent as Node<T>).left === this) {\n        (rightChild.parent as Node<T>).left = rightChild\n      } else if ((rightChild.parent as Node<T>).right === this) {\n        (rightChild.parent as Node<T>).right = rightChild\n      }\n    }\n\n    this.right = rightChild.left\n    if (this.right !== undefined) {\n      this.right.parent = this\n    }\n    rightChild.left = this\n    this.parent = rightChild\n    this.updateHeight()\n    rightChild.updateHeight()\n  }\n\n  private _rightRotate() {\n    const leftChild = this.left as Node<T>\n    leftChild.parent = this.parent\n\n    if (leftChild.parent === undefined) {\n      this.intervalTree.root = leftChild\n    } else {\n      if (leftChild.parent.left === this) {\n        leftChild.parent.left = leftChild\n      } else if (leftChild.parent.right === this) {\n        leftChild.parent.right = leftChild\n      }\n    }\n\n    this.left = leftChild.right\n    if (this.left !== undefined) {\n      this.left.parent = this\n    }\n    leftChild.right = this\n    this.parent = leftChild\n    this.updateHeight()\n    leftChild.updateHeight()\n  }\n\n  // Rebalances the tree if the height value between two nodes of the same parent is greater than\n  // two. There are 4 cases that can happen which are outlined in the graphics above\n  private _rebalance() {\n    if (height(this.left) >= 2 + height(this.right)) {\n      const left = this.left as Node<T>\n      if (height(left.left) >= height(left.right)) {\n        // Left-Left case\n        this._rightRotate()\n        this._updateMaxAfterRightRotate()\n      } else {\n        // Left-Right case\n        left._leftRotate()\n        this._rightRotate()\n        this._updateMaxAfterRightRotate()\n      }\n    } else if (height(this.right) >= 2 + height(this.left)) {\n      const right = this.right as Node<T>\n      if (height(right.right) >= height(right.left)) {\n        // Right-Right case\n        this._leftRotate()\n        this._updateMaxAfterLeftRotate()\n      } else {\n        // Right-Left case\n        right._rightRotate()\n        this._leftRotate()\n        this._updateMaxAfterLeftRotate()\n      }\n    }\n  }\n\n  public insert(record: T) {\n    if (record.low < this.key) {\n      // Insert into left subtree\n      if (this.left === undefined) {\n        this.left = new Node(this.intervalTree, record)\n        this.left.parent = this\n      } else {\n        this.left.insert(record)\n      }\n    } else {\n      // Insert into right subtree\n      if (this.right === undefined) {\n        this.right = new Node(this.intervalTree, record)\n        this.right.parent = this\n      } else {\n        this.right.insert(record)\n      }\n    }\n\n    // Update the max value of this ancestor if needed\n    if (this.max < record.high) {\n      this.max = record.high\n    }\n\n    // Update height of each node\n    this.updateHeight()\n\n    // Rebalance the tree to ensure all operations are executed in O(logn) time. This is especially\n    // important in searching, as the tree has a high chance of degenerating without the rebalancing\n    this._rebalance()\n  }\n\n  private _getOverlappingRecords(currentNode: Node<T>, low: number, high: number) {\n    if (currentNode.key <= high && low <= currentNode.getNodeHigh()) {\n      // Nodes are overlapping, check if individual records in the node are overlapping\n      const tempResults: T[] = []\n      for (let i = 0; i < currentNode.records.length; i++) {\n        if (currentNode.records[i].high >= low) {\n          tempResults.push(currentNode.records[i])\n        }\n      }\n      return tempResults\n    }\n    return []\n  }\n\n  public search(low: number, high: number) {\n    // Don't search nodes that don't exist\n    if (this === undefined) {\n      return []\n    }\n\n    let leftSearch: T[] = []\n    let ownSearch: T[] = []\n    let rightSearch: T[] = []\n\n    // If interval is to the right of the rightmost point of any interval in this node and all its\n    // children, there won't be any matches\n    if (low > this.max) {\n      return []\n    }\n\n    // Search left children\n    if (this.left !== undefined && this.left.max >= low) {\n      leftSearch = this.left.search(low, high)\n    }\n\n    // Check this node\n    ownSearch = this._getOverlappingRecords(this, low, high)\n\n    // If interval is to the left of the start of this interval, then it can't be in any child to\n    // the right\n    if (high < this.key) {\n      return leftSearch.concat(ownSearch)\n    }\n\n    // Otherwise, search right children\n    if (this.right !== undefined) {\n      rightSearch = this.right.search(low, high)\n    }\n\n    // Return accumulated results, if any\n    return leftSearch.concat(ownSearch, rightSearch)\n  }\n\n  // Searches for a node by a `key` value\n  public searchExisting(low: number): Node<T> | undefined {\n    if (this === undefined) {\n      return undefined\n    }\n\n    if (this.key === low) {\n      return this\n    } else if (low < this.key) {\n      if (this.left !== undefined) {\n        return this.left.searchExisting(low)\n      }\n    } else {\n      if (this.right !== undefined) {\n        return this.right.searchExisting(low)\n      }\n    }\n\n    return undefined\n  }\n\n  // Returns the smallest node of the subtree\n  private _minValue(): Node<T> {\n    if (this.left === undefined) {\n      return this\n    } else {\n      return this.left._minValue()\n    }\n  }\n\n  public remove(node: Node<T>): Node<T> | undefined {\n    const parent = this.parent as Node<T>\n\n    if (node.key < this.key) {\n      // Node to be removed is on the left side\n      if (this.left !== undefined) {\n        return this.left.remove(node)\n      } else {\n        return undefined\n      }\n    } else if (node.key > this.key) {\n      // Node to be removed is on the right side\n      if (this.right !== undefined) {\n        return this.right.remove(node)\n      } else {\n        return undefined\n      }\n    } else {\n      if (this.left !== undefined && this.right !== undefined) {\n        // Node has two children\n        const minValue = this.right._minValue()\n        this.key = minValue.key\n        this.records = minValue.records\n        return this.right.remove(this)\n      } else if (parent.left === this) {\n        // One child or no child case on left side\n        if (this.right !== undefined) {\n          parent.left = this.right\n          this.right.parent = parent\n        } else {\n          parent.left = this.left\n          if (this.left !== undefined) {\n            this.left.parent = parent\n          }\n        }\n        parent.updateMaxOfParents()\n        parent.updateHeight()\n        parent._rebalance()\n        return this\n      } else if (parent.right === this) {\n        // One child or no child case on right side\n        if (this.right !== undefined) {\n          parent.right = this.right\n          this.right.parent = parent\n        } else {\n          parent.right = this.left\n          if (this.left !== undefined) {\n            this.left.parent = parent\n          }\n        }\n        parent.updateMaxOfParents()\n        parent.updateHeight()\n        parent._rebalance()\n        return this\n      }\n    }\n  }\n}\n\nexport class IntervalTree<T extends Interval> {\n  public root?: Node<T>\n  public count = 0\n\n  public insert(record: T) {\n    if (record.low > record.high) {\n      throw new Error('`low` value must be lower or equal to `high` value')\n    }\n\n    if (this.root === undefined) {\n      // Base case: Tree is empty, new node becomes root\n      this.root = new Node(this, record)\n      this.count++\n      return true\n    } else {\n      // Otherwise, check if node already exists with the same key\n      const node = this.root.searchExisting(record.low)\n      if (node !== undefined) {\n        // Check the records in this node if there already is the one with same low, high, data\n        for (let i = 0; i < node.records.length; i++) {\n          if (isSame(node.records[i], record)) {\n            // This record is same as the one we're trying to insert; return false to indicate\n            // nothing has been inserted\n            return false\n          }\n        }\n\n        // Add the record to the node\n        node.records.push(record)\n\n        // Update max of the node and its parents if necessary\n        if (record.high > node.max) {\n          node.max = record.high\n          if (node.parent) {\n            node.parent.updateMaxOfParents()\n          }\n        }\n        this.count++\n        return true\n      } else {\n        // Node with this key doesn't already exist. Call insert function on root's node\n        this.root.insert(record)\n        this.count++\n        return true\n      }\n    }\n  }\n\n  public search(low: number, high: number) {\n    if (this.root === undefined) {\n      // Tree is empty; return empty array\n      return []\n    } else {\n      return this.root.search(low, high)\n    }\n  }\n\n  public remove(record: T) {\n    if (this.root === undefined) {\n      // Tree is empty; nothing to remove\n      return false\n    } else {\n      const node = this.root.searchExisting(record.low)\n      if (node === undefined) {\n        return false\n      } else if (node.records.length > 1) {\n        let removedRecord: T | undefined\n        // Node with this key has 2 or more records. Find the one we need and remove it\n        for (let i = 0; i < node.records.length; i++) {\n          if (isSame(node.records[i], record)) {\n            removedRecord = node.records[i]\n            node.records.splice(i, 1)\n            break\n          }\n        }\n\n        if (removedRecord) {\n          removedRecord = undefined\n          // Update max of that node and its parents if necessary\n          if (record.high === node.max) {\n            const nodeHigh = node.getNodeHigh()\n            if (node.left !== undefined && node.right !== undefined) {\n              node.max = Math.max(Math.max(node.left.max, node.right.max), nodeHigh)\n            } else if (node.left !== undefined && node.right === undefined) {\n              node.max = Math.max(node.left.max, nodeHigh)\n            } else if (node.left === undefined && node.right !== undefined) {\n              node.max = Math.max(node.right.max, nodeHigh)\n            } else {\n              node.max = nodeHigh\n            }\n            if (node.parent) {\n              node.parent.updateMaxOfParents()\n            }\n          }\n          this.count--\n          return true\n        } else {\n          return false\n        }\n      } else if (node.records.length === 1) {\n        // Node with this key has only 1 record. Check if the remaining record in this node is\n        // actually the one we want to remove\n        if (isSame(node.records[0], record)) {\n          // The remaining record is the one we want to remove. Remove the whole node from the tree\n          if (this.root.key === node.key) {\n            // We're removing the root element. Create a dummy node that will temporarily take\n            // root's parent role\n            const rootParent = new Node<T>(this, { low: record.low, high: record.low} as T)\n            rootParent.left = this.root\n            this.root.parent = rootParent\n            let removedNode = this.root.remove(node)\n            this.root = rootParent.left\n            if (this.root !== undefined) {\n              this.root.parent = undefined\n            }\n            if (removedNode) {\n              removedNode = undefined\n              this.count--\n              return true\n            } else {\n              return false\n            }\n          } else {\n            let removedNode = this.root.remove(node)\n            if (removedNode) {\n              removedNode = undefined\n              this.count--\n              return true\n            } else {\n              return false\n            }\n          }\n        } else {\n          // The remaining record is not the one we want to remove\n          return false\n        }\n      } else {\n        // No records at all in this node?! Shouldn't happen\n        return false\n      }\n    }\n  }\n\n  public inOrder() {\n    return new InOrder(this.root)\n  }\n\n  public preOrder() {\n    return new PreOrder(this.root)\n  }\n}\n\nexport interface DataInterval<T> extends Interval {\n  data: T\n}\n\nexport default class DataIntervalTree<T> {\n  private tree = new IntervalTree<DataInterval<T>>()\n\n  public insert(low: number, high: number, data: T) {\n    return this.tree.insert({ low, high, data})\n  }\n\n  public remove(low: number, high: number, data: T) {\n    return this.tree.remove({ low, high, data})\n  }\n\n  public search(low: number, high: number) {\n    return this.tree.search(low, high).map(v => v.data)\n  }\n\n  public inOrder() {\n    return this.tree.inOrder()\n  }\n\n  public preOrder() {\n    return this.tree.preOrder()\n  }\n\n  get count() {\n    return this.tree.count\n  }\n}\n\nexport class InOrder<T extends Interval> implements IterableIterator<T> {\n  private stack: Node<T>[] = []\n\n  private currentNode?: Node<T>\n  private i: number\n\n  constructor(startNode?: Node<T>) {\n    if (startNode !== undefined) {\n      this.push(startNode)\n    }\n  }\n\n  public next(): IteratorResult<T> {\n    // Will only happen if stack is empty and pop is called\n    if (this.currentNode === undefined) {\n      return {\n        done: true,\n        value: undefined,\n      } as any as IteratorResult<T>\n    }\n\n    // Process this node\n    if (this.i < this.currentNode.records.length) {\n      return {\n        done: false,\n        value: this.currentNode.records[this.i++],\n      }\n    }\n\n    if (this.currentNode.right !== undefined) { // Can we go right?\n      this.push(this.currentNode.right)\n    } else { // Otherwise go up\n      // Might pop the last and set this.currentNode = undefined\n      this.pop()\n    }\n    return this.next()\n  }\n\n  private push(node: Node<T>) {\n    this.currentNode = node\n    this.i = 0\n\n    while (this.currentNode.left !== undefined) {\n      this.stack.push(this.currentNode)\n      this.currentNode = this.currentNode.left\n    }\n  }\n\n  private pop() {\n    this.currentNode = this.stack.pop()\n    this.i = 0\n  }\n}\n\n// Only define `Symbol.iterator` in compatible environments.\nexport interface InOrder<T extends Interval> {\n  [Symbol.iterator](): IterableIterator<T>\n}\n\nif (typeof Symbol === 'function') {\n  InOrder.prototype[Symbol.iterator] = function() { return this }\n}\n\nexport class PreOrder<T extends Interval> implements IterableIterator<T> {\n  private stack: Node<T>[] = []\n\n  private currentNode?: Node<T>\n  private i: number = 0\n\n  constructor(startNode?: Node<T>) {\n    this.currentNode = startNode\n  }\n\n  public next(): IteratorResult<T> {\n    // Will only happen if stack is empty and pop is called,\n    // which only happens if there is no right node (i.e we are done)\n    if (this.currentNode === undefined) {\n      return {\n        done: true,\n        value: undefined,\n      } as any as IteratorResult<T>\n    }\n\n    // Process this node\n    if (this.i < this.currentNode.records.length) {\n      return {\n        done: false,\n        value: this.currentNode.records[this.i++],\n      }\n    }\n\n    if (this.currentNode.right !== undefined) {\n      this.push(this.currentNode.right)\n    }\n    if (this.currentNode.left !== undefined) {\n      this.push(this.currentNode.left)\n    }\n    this.pop()\n    return this.next()\n  }\n\n  private push(node: Node<T>) {\n    this.stack.push(node)\n  }\n\n  private pop() {\n    this.currentNode = this.stack.pop()\n    this.i = 0\n  }\n}\n\n// Only define `Symbol.iterator` in compatible environments.\nexport interface PreOrder<T extends Interval> {\n  [Symbol.iterator](): IterableIterator<T>\n}\n\nif (typeof Symbol === 'function') {\n  PreOrder.prototype[Symbol.iterator] = function() { return this }\n}\n","/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.7.1\n* https://svgdotjs.github.io/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Fri Nov 30 2018 10:01:55 GMT+0100 (GMT+01:00)\n*/;\n(function(root, factory) {\r\n  /* istanbul ignore next */\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function(){\r\n      return factory(root, root.document)\r\n    })\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = root.document ? factory(root, root.document) : function(w){ return factory(w, w.document) }\r\n  } else {\r\n    root.SVG = factory(root, root.document)\r\n  }\r\n}(typeof window !== \"undefined\" ? window : this, function(window, document) {\r\n\r\n// Find global reference - uses 'this' by default when available,\r\n// falls back to 'window' otherwise (for bundlers like Webpack)\r\nvar globalRef = (typeof this !== \"undefined\") ? this : window;\r\n\r\n// The main wrapping element\r\nvar SVG = globalRef.SVG = function(element) {\r\n  if (SVG.supported) {\r\n    element = new SVG.Doc(element)\r\n\r\n    if(!SVG.parser.draw)\r\n      SVG.prepare()\r\n\r\n    return element\r\n  }\r\n}\r\n\r\n// Default namespaces\r\nSVG.ns    = 'http://www.w3.org/2000/svg'\r\nSVG.xmlns = 'http://www.w3.org/2000/xmlns/'\r\nSVG.xlink = 'http://www.w3.org/1999/xlink'\r\nSVG.svgjs = 'http://svgjs.com/svgjs'\r\n\r\n// Svg support test\r\nSVG.supported = (function() {\r\n  return !! document.createElementNS &&\r\n         !! document.createElementNS(SVG.ns,'svg').createSVGRect\r\n})()\r\n\r\n// Don't bother to continue if SVG is not supported\r\nif (!SVG.supported) return false\r\n\r\n// Element id sequence\r\nSVG.did  = 1000\r\n\r\n// Get next named element id\r\nSVG.eid = function(name) {\r\n  return 'Svgjs' + capitalize(name) + (SVG.did++)\r\n}\r\n\r\n// Method for element creation\r\nSVG.create = function(name) {\r\n  // create element\r\n  var element = document.createElementNS(this.ns, name)\r\n\r\n  // apply unique id\r\n  element.setAttribute('id', this.eid(name))\r\n\r\n  return element\r\n}\r\n\r\n// Method for extending objects\r\nSVG.extend = function() {\r\n  var modules, methods, key, i\r\n\r\n  // Get list of modules\r\n  modules = [].slice.call(arguments)\r\n\r\n  // Get object with extensions\r\n  methods = modules.pop()\r\n\r\n  for (i = modules.length - 1; i >= 0; i--)\r\n    if (modules[i])\r\n      for (key in methods)\r\n        modules[i].prototype[key] = methods[key]\r\n\r\n  // Make sure SVG.Set inherits any newly added methods\r\n  if (SVG.Set && SVG.Set.inherit)\r\n    SVG.Set.inherit()\r\n}\r\n\r\n// Invent new element\r\nSVG.invent = function(config) {\r\n  // Create element initializer\r\n  var initializer = typeof config.create == 'function' ?\r\n    config.create :\r\n    function() {\r\n      this.constructor.call(this, SVG.create(config.create))\r\n    }\r\n\r\n  // Inherit prototype\r\n  if (config.inherit)\r\n    initializer.prototype = new config.inherit\r\n\r\n  // Extend with methods\r\n  if (config.extend)\r\n    SVG.extend(initializer, config.extend)\r\n\r\n  // Attach construct method to parent\r\n  if (config.construct)\r\n    SVG.extend(config.parent || SVG.Container, config.construct)\r\n\r\n  return initializer\r\n}\r\n\r\n// Adopt existing svg elements\r\nSVG.adopt = function(node) {\r\n  // check for presence of node\r\n  if (!node) return null\r\n\r\n  // make sure a node isn't already adopted\r\n  if (node.instance) return node.instance\r\n\r\n  // initialize variables\r\n  var element\r\n\r\n  // adopt with element-specific settings\r\n  if (node.nodeName == 'svg')\r\n    element = node.parentNode instanceof window.SVGElement ? new SVG.Nested : new SVG.Doc\r\n  else if (node.nodeName == 'linearGradient')\r\n    element = new SVG.Gradient('linear')\r\n  else if (node.nodeName == 'radialGradient')\r\n    element = new SVG.Gradient('radial')\r\n  else if (SVG[capitalize(node.nodeName)])\r\n    element = new SVG[capitalize(node.nodeName)]\r\n  else\r\n    element = new SVG.Element(node)\r\n\r\n  // ensure references\r\n  element.type  = node.nodeName\r\n  element.node  = node\r\n  node.instance = element\r\n\r\n  // SVG.Class specific preparations\r\n  if (element instanceof SVG.Doc)\r\n    element.namespace().defs()\r\n\r\n  // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\r\n  element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {})\r\n\r\n  return element\r\n}\r\n\r\n// Initialize parsing element\r\nSVG.prepare = function() {\r\n  // Select document body and create invisible svg element\r\n  var body = document.getElementsByTagName('body')[0]\r\n    , draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0)\r\n\r\n  // Create parser object\r\n  SVG.parser = {\r\n    body: body || document.documentElement\r\n  , draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').attr('focusable', 'false').node\r\n  , poly: draw.polyline().node\r\n  , path: draw.path().node\r\n  , native: SVG.create('svg')\r\n  }\r\n}\r\n\r\nSVG.parser = {\r\n  native: SVG.create('svg')\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  if(!SVG.parser.draw)\r\n    SVG.prepare()\r\n}, false)\r\n\n// Storage for regular expressions\r\nSVG.regex = {\r\n  // Parse unit value\r\n  numberAndUnit:    /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i\r\n\r\n  // Parse hex value\r\n, hex:              /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n\r\n  // Parse rgb value\r\n, rgb:              /rgb\\((\\d+),(\\d+),(\\d+)\\)/\r\n\r\n  // Parse reference id\r\n, reference:        /#([a-z0-9\\-_]+)/i\r\n\r\n  // splits a transformation chain\r\n, transforms:       /\\)\\s*,?\\s*/\r\n\r\n  // Whitespace\r\n, whitespace:       /\\s/g\r\n\r\n  // Test hex value\r\n, isHex:            /^#[a-f0-9]{3,6}$/i\r\n\r\n  // Test rgb value\r\n, isRgb:            /^rgb\\(/\r\n\r\n  // Test css declaration\r\n, isCss:            /[^:]+:[^;]+;?/\r\n\r\n  // Test for blank string\r\n, isBlank:          /^(\\s+)?$/\r\n\r\n  // Test for numeric string\r\n, isNumber:         /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i\r\n\r\n  // Test for percent value\r\n, isPercent:        /^-?[\\d\\.]+%$/\r\n\r\n  // Test for image url\r\n, isImage:          /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\r\n\r\n  // split at whitespace and comma\r\n, delimiter:        /[\\s,]+/\r\n\r\n  // The following regex are used to parse the d attribute of a path\r\n\r\n  // Matches all hyphens which are not after an exponent\r\n, hyphen:           /([^e])\\-/gi\r\n\r\n  // Replaces and tests for all path letters\r\n, pathLetters:      /[MLHVCSQTAZ]/gi\r\n\r\n  // yes we need this one, too\r\n, isPathLetter:     /[MLHVCSQTAZ]/i\r\n\r\n  // matches 0.154.23.45\r\n, numbersWithDots:  /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi\r\n\r\n  // matches .\r\n, dots:             /\\./g\r\n}\r\n\nSVG.utils = {\r\n  // Map function\r\n  map: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      result.push(block(array[i]))\r\n\r\n    return result\r\n  }\r\n\r\n  // Filter function\r\n, filter: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      if (block(array[i]))\r\n        result.push(array[i])\r\n\r\n    return result\r\n  }\r\n\r\n  // Degrees to radians\r\n, radians: function(d) {\r\n    return d % 360 * Math.PI / 180\r\n  }\r\n\r\n  // Radians to degrees\r\n, degrees: function(r) {\r\n    return r * 180 / Math.PI % 360\r\n  }\r\n\r\n, filterSVGElements: function(nodes) {\r\n    return this.filter( nodes, function(el) { return el instanceof window.SVGElement })\r\n  }\r\n\r\n}\n\r\nSVG.defaults = {\r\n  // Default attribute values\r\n  attrs: {\r\n    // fill and stroke\r\n    'fill-opacity':     1\r\n  , 'stroke-opacity':   1\r\n  , 'stroke-width':     0\r\n  , 'stroke-linejoin':  'miter'\r\n  , 'stroke-linecap':   'butt'\r\n  , fill:               '#000000'\r\n  , stroke:             '#000000'\r\n  , opacity:            1\r\n    // position\r\n  , x:                  0\r\n  , y:                  0\r\n  , cx:                 0\r\n  , cy:                 0\r\n    // size\r\n  , width:              0\r\n  , height:             0\r\n    // radius\r\n  , r:                  0\r\n  , rx:                 0\r\n  , ry:                 0\r\n    // gradient\r\n  , offset:             0\r\n  , 'stop-opacity':     1\r\n  , 'stop-color':       '#000000'\r\n    // text\r\n  , 'font-size':        16\r\n  , 'font-family':      'Helvetica, Arial, sans-serif'\r\n  , 'text-anchor':      'start'\r\n  }\r\n\r\n}\n// Module for color convertions\r\nSVG.Color = function(color) {\r\n  var match\r\n\r\n  // initialize defaults\r\n  this.r = 0\r\n  this.g = 0\r\n  this.b = 0\r\n\r\n  if(!color) return\r\n\r\n  // parse color\r\n  if (typeof color === 'string') {\r\n    if (SVG.regex.isRgb.test(color)) {\r\n      // get rgb values\r\n      match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace,''))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1])\r\n      this.g = parseInt(match[2])\r\n      this.b = parseInt(match[3])\r\n\r\n    } else if (SVG.regex.isHex.test(color)) {\r\n      // get hex values\r\n      match = SVG.regex.hex.exec(fullHex(color))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1], 16)\r\n      this.g = parseInt(match[2], 16)\r\n      this.b = parseInt(match[3], 16)\r\n\r\n    }\r\n\r\n  } else if (typeof color === 'object') {\r\n    this.r = color.r\r\n    this.g = color.g\r\n    this.b = color.b\r\n\r\n  }\r\n\r\n}\r\n\r\nSVG.extend(SVG.Color, {\r\n  // Default to hex conversion\r\n  toString: function() {\r\n    return this.toHex()\r\n  }\r\n  // Build hex value\r\n, toHex: function() {\r\n    return '#'\r\n      + compToHex(this.r)\r\n      + compToHex(this.g)\r\n      + compToHex(this.b)\r\n  }\r\n  // Build rgb value\r\n, toRgb: function() {\r\n    return 'rgb(' + [this.r, this.g, this.b].join() + ')'\r\n  }\r\n  // Calculate true brightness\r\n, brightness: function() {\r\n    return (this.r / 255 * 0.30)\r\n         + (this.g / 255 * 0.59)\r\n         + (this.b / 255 * 0.11)\r\n  }\r\n  // Make color morphable\r\n, morph: function(color) {\r\n    this.destination = new SVG.Color(color)\r\n\r\n    return this\r\n  }\r\n  // Get morphed color at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // normalise pos\r\n    pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\r\n\r\n    // generate morphed color\r\n    return new SVG.Color({\r\n      r: ~~(this.r + (this.destination.r - this.r) * pos)\r\n    , g: ~~(this.g + (this.destination.g - this.g) * pos)\r\n    , b: ~~(this.b + (this.destination.b - this.b) * pos)\r\n    })\r\n  }\r\n\r\n})\r\n\r\n// Testers\r\n\r\n// Test if given value is a color string\r\nSVG.Color.test = function(color) {\r\n  color += ''\r\n  return SVG.regex.isHex.test(color)\r\n      || SVG.regex.isRgb.test(color)\r\n}\r\n\r\n// Test if given value is a rgb object\r\nSVG.Color.isRgb = function(color) {\r\n  return color && typeof color.r == 'number'\r\n               && typeof color.g == 'number'\r\n               && typeof color.b == 'number'\r\n}\r\n\r\n// Test if given value is a color\r\nSVG.Color.isColor = function(color) {\r\n  return SVG.Color.isRgb(color) || SVG.Color.test(color)\r\n}\n// Module for array conversion\r\nSVG.Array = function(array, fallback) {\r\n  array = (array || []).valueOf()\r\n\r\n  // if array is empty and fallback is provided, use fallback\r\n  if (array.length == 0 && fallback)\r\n    array = fallback.valueOf()\r\n\r\n  // parse array\r\n  this.value = this.parse(array)\r\n}\r\n\r\nSVG.extend(SVG.Array, {\r\n  // Make array morphable\r\n  morph: function(array) {\r\n    this.destination = this.parse(array)\r\n\r\n    // normalize length of arrays\r\n    if (this.value.length != this.destination.length) {\r\n      var lastValue       = this.value[this.value.length - 1]\r\n        , lastDestination = this.destination[this.destination.length - 1]\r\n\r\n      while(this.value.length > this.destination.length)\r\n        this.destination.push(lastDestination)\r\n      while(this.value.length < this.destination.length)\r\n        this.value.push(lastValue)\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Clean up any duplicate points\r\n, settle: function() {\r\n    // find all unique values\r\n    for (var i = 0, il = this.value.length, seen = []; i < il; i++)\r\n      if (seen.indexOf(this.value[i]) == -1)\r\n        seen.push(this.value[i])\r\n\r\n    // set new value\r\n    return this.value = seen\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed array\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos)\r\n\r\n    return new SVG.Array(array)\r\n  }\r\n  // Convert array to string\r\n, toString: function() {\r\n    return this.value.join(' ')\r\n  }\r\n  // Real value\r\n, valueOf: function() {\r\n    return this.value\r\n  }\r\n  // Parse whitespace separated string\r\n, parse: function(array) {\r\n    array = array.valueOf()\r\n\r\n    // if already is an array, no need to parse it\r\n    if (Array.isArray(array)) return array\r\n\r\n    return this.split(array)\r\n  }\r\n  // Strip unnecessary whitespace\r\n, split: function(string) {\r\n    return string.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n  }\r\n  // Reverse array\r\n, reverse: function() {\r\n    this.value.reverse()\r\n\r\n    return this\r\n  }\r\n, clone: function() {\r\n    var clone = new this.constructor()\r\n    clone.value = array_clone(this.value)\r\n    return clone\r\n  }\r\n})\n// Poly points array\r\nSVG.PointArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [[0,0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PointArray.prototype = new SVG.Array\r\nSVG.PointArray.prototype.constructor = SVG.PointArray\r\n\r\nSVG.extend(SVG.PointArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    // convert to a poly point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i].join(','))\r\n\r\n    return array.join(' ')\r\n  }\r\n  // Convert array to line object\r\n, toLine: function() {\r\n    return {\r\n      x1: this.value[0][0]\r\n    , y1: this.value[0][1]\r\n    , x2: this.value[1][0]\r\n    , y2: this.value[1][1]\r\n    }\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push([\r\n        this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos\r\n      , this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos\r\n      ])\r\n\r\n    return new SVG.PointArray(array)\r\n  }\r\n  // Parse point string and flat array\r\n, parse: function(array) {\r\n    var points = []\r\n\r\n    array = array.valueOf()\r\n\r\n    // if it is an array\r\n    if (Array.isArray(array)) {\r\n      // and it is not flat, there is no need to parse it\r\n      if(Array.isArray(array[0])) {\r\n        // make sure to use a clone\r\n        return array.map(function (el) { return el.slice() })\r\n      } else if (array[0].x != null){\r\n        // allow point objects to be passed\r\n        return array.map(function (el) { return [el.x, el.y] })\r\n      }\r\n    } else { // Else, it is considered as a string\r\n      // parse points\r\n      array = array.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n    }\r\n\r\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\r\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\r\n    if (array.length % 2 !== 0) array.pop()\r\n\r\n    // wrap points in two-tuples and parse points as floats\r\n    for(var i = 0, len = array.length; i < len; i = i + 2)\r\n      points.push([ array[i], array[i+1] ])\r\n\r\n    return points\r\n  }\r\n  // Move point string\r\n, move: function(x, y) {\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    // move every point\r\n    if (!isNaN(x) && !isNaN(y))\r\n      for (var i = this.value.length - 1; i >= 0; i--)\r\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y]\r\n\r\n    return this\r\n  }\r\n  // Resize poly string\r\n, size: function(width, height) {\r\n    var i, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      if(box.width) this.value[i][0] = ((this.value[i][0] - box.x) * width)  / box.width  + box.x\r\n      if(box.height) this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get bounding box of points\r\n, bbox: function() {\r\n    SVG.parser.poly.setAttribute('points', this.toString())\r\n\r\n    return SVG.parser.poly.getBBox()\r\n  }\r\n})\r\n\nvar pathHandlers = {\r\n  M: function(c, p, p0) {\r\n    p.x = p0.x = c[0]\r\n    p.y = p0.y = c[1]\r\n\r\n    return ['M', p.x, p.y]\r\n  },\r\n  L: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['L', c[0], c[1]]\r\n  },\r\n  H: function(c, p) {\r\n    p.x = c[0]\r\n    return ['H', c[0]]\r\n  },\r\n  V: function(c, p) {\r\n    p.y = c[0]\r\n    return ['V', c[0]]\r\n  },\r\n  C: function(c, p) {\r\n    p.x = c[4]\r\n    p.y = c[5]\r\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]]\r\n  },\r\n  S: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['S', c[0], c[1], c[2], c[3]]\r\n  },\r\n  Q: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['Q', c[0], c[1], c[2], c[3]]\r\n  },\r\n  T: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['T', c[0], c[1]]\r\n  },\r\n  Z: function(c, p, p0) {\r\n    p.x = p0.x\r\n    p.y = p0.y\r\n    return ['Z']\r\n  },\r\n  A: function(c, p) {\r\n    p.x = c[5]\r\n    p.y = c[6]\r\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]]\r\n  }\r\n}\r\n\r\nvar mlhvqtcsa = 'mlhvqtcsaz'.split('')\r\n\r\nfor(var i = 0, il = mlhvqtcsa.length; i < il; ++i){\r\n  pathHandlers[mlhvqtcsa[i]] = (function(i){\r\n    return function(c, p, p0) {\r\n      if(i == 'H') c[0] = c[0] + p.x\r\n      else if(i == 'V') c[0] = c[0] + p.y\r\n      else if(i == 'A'){\r\n        c[5] = c[5] + p.x,\r\n        c[6] = c[6] + p.y\r\n      }\r\n      else\r\n        for(var j = 0, jl = c.length; j < jl; ++j) {\r\n          c[j] = c[j] + (j%2 ? p.y : p.x)\r\n        }\r\n\r\n      return pathHandlers[i](c, p, p0)\r\n    }\r\n  })(mlhvqtcsa[i].toUpperCase())\r\n}\r\n\r\n// Path points array\r\nSVG.PathArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [['M', 0, 0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PathArray.prototype = new SVG.Array\r\nSVG.PathArray.prototype.constructor = SVG.PathArray\r\n\r\nSVG.extend(SVG.PathArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    return arrayToString(this.value)\r\n  }\r\n  // Move path string\r\n, move: function(x, y) {\r\n    // get bounding box of current situation\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    if (!isNaN(x) && !isNaN(y)) {\r\n      // move every point\r\n      for (var l, i = this.value.length - 1; i >= 0; i--) {\r\n        l = this.value[i][0]\r\n\r\n        if (l == 'M' || l == 'L' || l == 'T')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n\r\n        } else if (l == 'H')  {\r\n          this.value[i][1] += x\r\n\r\n        } else if (l == 'V')  {\r\n          this.value[i][1] += y\r\n\r\n        } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n          this.value[i][3] += x\r\n          this.value[i][4] += y\r\n\r\n          if (l == 'C')  {\r\n            this.value[i][5] += x\r\n            this.value[i][6] += y\r\n          }\r\n\r\n        } else if (l == 'A')  {\r\n          this.value[i][6] += x\r\n          this.value[i][7] += y\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Resize path string\r\n, size: function(width, height) {\r\n    // get bounding box of current situation\r\n    var i, l, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      l = this.value[i][0]\r\n\r\n      if (l == 'M' || l == 'L' || l == 'T')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'H')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n\r\n      } else if (l == 'V')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n        this.value[i][3] = ((this.value[i][3] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][4] = ((this.value[i][4] - box.y) * height) / box.height + box.y\r\n\r\n        if (l == 'C')  {\r\n          this.value[i][5] = ((this.value[i][5] - box.x) * width)  / box.width  + box.x\r\n          this.value[i][6] = ((this.value[i][6] - box.y) * height) / box.height + box.y\r\n        }\r\n\r\n      } else if (l == 'A')  {\r\n        // resize radii\r\n        this.value[i][1] = (this.value[i][1] * width)  / box.width\r\n        this.value[i][2] = (this.value[i][2] * height) / box.height\r\n\r\n        // move position values\r\n        this.value[i][6] = ((this.value[i][6] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][7] = ((this.value[i][7] - box.y) * height) / box.height + box.y\r\n      }\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Test if the passed path array use the same path data commands as this path array\r\n, equalCommands: function(pathArray) {\r\n    var i, il, equalCommands\r\n\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    equalCommands = this.value.length === pathArray.value.length\r\n    for(i = 0, il = this.value.length; equalCommands && i < il; i++) {\r\n      equalCommands = this.value[i][0] === pathArray.value[i][0]\r\n    }\r\n\r\n    return equalCommands\r\n  }\r\n  // Make path array morphable\r\n, morph: function(pathArray) {\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    if(this.equalCommands(pathArray)) {\r\n      this.destination = pathArray\r\n    } else {\r\n      this.destination = null\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get morphed path array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    var sourceArray = this.value\r\n      , destinationArray = this.destination.value\r\n      , array = [], pathArray = new SVG.PathArray()\r\n      , i, il, j, jl\r\n\r\n    // Animate has specified in the SVG spec\r\n    // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\r\n    for (i = 0, il = sourceArray.length; i < il; i++) {\r\n      array[i] = [sourceArray[i][0]]\r\n      for(j = 1, jl = sourceArray[i].length; j < jl; j++) {\r\n        array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos\r\n      }\r\n      // For the two flags of the elliptical arc command, the SVG spec say:\r\n      // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\r\n      // Elliptical arc command as an array followed by corresponding indexes:\r\n      // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\r\n      //   0    1   2        3                 4             5      6  7\r\n      if(array[i][0] === 'A') {\r\n        array[i][4] = +(array[i][4] != 0)\r\n        array[i][5] = +(array[i][5] != 0)\r\n      }\r\n    }\r\n\r\n    // Directly modify the value of a path array, this is done this way for performance\r\n    pathArray.value = array\r\n    return pathArray\r\n  }\r\n  // Absolutize and parse path to array\r\n, parse: function(array) {\r\n    // if it's already a patharray, no need to parse it\r\n    if (array instanceof SVG.PathArray) return array.valueOf()\r\n\r\n    // prepare for parsing\r\n    var i, x0, y0, s, seg, arr\r\n      , x = 0\r\n      , y = 0\r\n      , paramCnt = { 'M':2, 'L':2, 'H':1, 'V':1, 'C':6, 'S':4, 'Q':4, 'T':2, 'A':7, 'Z':0 }\r\n\r\n    if(typeof array == 'string'){\r\n\r\n      array = array\r\n        .replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\r\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\r\n        .replace(SVG.regex.hyphen, '$1 -')      // add space before hyphen\r\n        .trim()                                 // trim\r\n        .split(SVG.regex.delimiter)   // split into array\r\n\r\n    }else{\r\n      array = array.reduce(function(prev, curr){\r\n        return [].concat.call(prev, curr)\r\n      }, [])\r\n    }\r\n\r\n    // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\r\n    var arr = []\r\n      , p = new SVG.Point()\r\n      , p0 = new SVG.Point()\r\n      , index = 0\r\n      , len = array.length\r\n\r\n    do{\r\n      // Test if we have a path letter\r\n      if(SVG.regex.isPathLetter.test(array[index])){\r\n        s = array[index]\r\n        ++index\r\n      // If last letter was a move command and we got no new, it defaults to [L]ine\r\n      }else if(s == 'M'){\r\n        s = 'L'\r\n      }else if(s == 'm'){\r\n        s = 'l'\r\n      }\r\n\r\n      arr.push(pathHandlers[s].call(null,\r\n          array.slice(index, (index = index + paramCnt[s.toUpperCase()])).map(parseFloat),\r\n          p, p0\r\n        )\r\n      )\r\n\r\n    }while(len > index)\r\n\r\n    return arr\r\n\r\n  }\r\n  // Get bounding box of path\r\n, bbox: function() {\r\n    SVG.parser.path.setAttribute('d', this.toString())\r\n\r\n    return SVG.parser.path.getBBox()\r\n  }\r\n\r\n})\r\n\n// Module for unit convertions\r\nSVG.Number = SVG.invent({\r\n  // Initialize\r\n  create: function(value, unit) {\r\n    // initialize defaults\r\n    this.value = 0\r\n    this.unit  = unit || ''\r\n\r\n    // parse value\r\n    if (typeof value === 'number') {\r\n      // ensure a valid numeric value\r\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? (value < 0 ? -3.4e+38 : +3.4e+38) : value\r\n\r\n    } else if (typeof value === 'string') {\r\n      unit = value.match(SVG.regex.numberAndUnit)\r\n\r\n      if (unit) {\r\n        // make value numeric\r\n        this.value = parseFloat(unit[1])\r\n\r\n        // normalize\r\n        if (unit[5] == '%')\r\n          this.value /= 100\r\n        else if (unit[5] == 's')\r\n          this.value *= 1000\r\n\r\n        // store unit\r\n        this.unit = unit[5]\r\n      }\r\n\r\n    } else {\r\n      if (value instanceof SVG.Number) {\r\n        this.value = value.valueOf()\r\n        this.unit  = value.unit\r\n      }\r\n    }\r\n\r\n  }\r\n  // Add methods\r\n, extend: {\r\n    // Stringalize\r\n    toString: function() {\r\n      return (\r\n        this.unit == '%' ?\r\n          ~~(this.value * 1e8) / 1e6:\r\n        this.unit == 's' ?\r\n          this.value / 1e3 :\r\n          this.value\r\n      ) + this.unit\r\n    }\r\n  , toJSON: function() {\r\n      return this.toString()\r\n    }\r\n  , // Convert to primitive\r\n    valueOf: function() {\r\n      return this.value\r\n    }\r\n    // Add number\r\n  , plus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this + number, this.unit || number.unit)\r\n    }\r\n    // Subtract number\r\n  , minus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this - number, this.unit || number.unit)\r\n    }\r\n    // Multiply number\r\n  , times: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this * number, this.unit || number.unit)\r\n    }\r\n    // Divide number\r\n  , divide: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this / number, this.unit || number.unit)\r\n    }\r\n    // Convert to different unit\r\n  , to: function(unit) {\r\n      var number = new SVG.Number(this)\r\n\r\n      if (typeof unit === 'string')\r\n        number.unit = unit\r\n\r\n      return number\r\n    }\r\n    // Make number morphable\r\n  , morph: function(number) {\r\n      this.destination = new SVG.Number(number)\r\n\r\n      if(number.relative) {\r\n        this.destination.value += this.value\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Get morphed number at given position\r\n  , at: function(pos) {\r\n      // Make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // Generate new morphed number\r\n      return new SVG.Number(this.destination)\r\n          .minus(this)\r\n          .times(pos)\r\n          .plus(this)\r\n    }\r\n\r\n  }\r\n})\r\n\n\r\nSVG.Element = SVG.invent({\r\n  // Initialize node\r\n  create: function(node) {\r\n    // make stroke value accessible dynamically\r\n    this._stroke = SVG.defaults.attrs.stroke\r\n    this._event = null\r\n    this._events = {}\r\n\r\n    // initialize data object\r\n    this.dom = {}\r\n\r\n    // create circular reference\r\n    if (this.node = node) {\r\n      this.type = node.nodeName\r\n      this.node.instance = this\r\n      this._events = node._events || {}\r\n\r\n      // store current attribute value\r\n      this._stroke = node.getAttribute('stroke') || this._stroke\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return this.attr('y', y)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2)\r\n    }\r\n    // Move element to given x and y values\r\n  , move: function(x, y) {\r\n      return this.x(x).y(y)\r\n    }\r\n    // Move element by its center\r\n  , center: function(x, y) {\r\n      return this.cx(x).cy(y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return this.attr('width', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('height', height)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .width(new SVG.Number(p.width))\r\n        .height(new SVG.Number(p.height))\r\n    }\r\n    // Clone element\r\n  , clone: function(parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(this.node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) parent.add(clone)\r\n      else this.after(clone)\r\n\r\n      return clone\r\n    }\r\n    // Remove element\r\n  , remove: function() {\r\n      if (this.parent())\r\n        this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n    // Replace element\r\n  , replace: function(element) {\r\n      this.after(element).remove()\r\n\r\n      return element\r\n    }\r\n    // Add element to given container and return self\r\n  , addTo: function(parent) {\r\n      return parent.put(this)\r\n    }\r\n    // Add element to given container and return container\r\n  , putIn: function(parent) {\r\n      return parent.add(this)\r\n    }\r\n    // Get / set id\r\n  , id: function(id) {\r\n      return this.attr('id', id)\r\n    }\r\n    // Checks whether the given point inside the bounding box of the element\r\n  , inside: function(x, y) {\r\n      var box = this.bbox()\r\n\r\n      return x > box.x\r\n          && y > box.y\r\n          && x < box.x + box.width\r\n          && y < box.y + box.height\r\n    }\r\n    // Show element\r\n  , show: function() {\r\n      return this.style('display', '')\r\n    }\r\n    // Hide element\r\n  , hide: function() {\r\n      return this.style('display', 'none')\r\n    }\r\n    // Is element visible?\r\n  , visible: function() {\r\n      return this.style('display') != 'none'\r\n    }\r\n    // Return id on string conversion\r\n  , toString: function() {\r\n      return this.attr('id')\r\n    }\r\n    // Return array of classes on the node\r\n  , classes: function() {\r\n      var attr = this.attr('class')\r\n\r\n      return attr == null ? [] : attr.trim().split(SVG.regex.delimiter)\r\n    }\r\n    // Return true if class exists on the node, false otherwise\r\n  , hasClass: function(name) {\r\n      return this.classes().indexOf(name) != -1\r\n    }\r\n    // Add class to the node\r\n  , addClass: function(name) {\r\n      if (!this.hasClass(name)) {\r\n        var array = this.classes()\r\n        array.push(name)\r\n        this.attr('class', array.join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove class from the node\r\n  , removeClass: function(name) {\r\n      if (this.hasClass(name)) {\r\n        this.attr('class', this.classes().filter(function(c) {\r\n          return c != name\r\n        }).join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Toggle the presence of a class on the node\r\n  , toggleClass: function(name) {\r\n      return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\r\n    }\r\n    // Get referenced element form attribute value\r\n  , reference: function(attr) {\r\n      return SVG.get(this.attr(attr))\r\n    }\r\n    // Returns the parent element instance\r\n  , parent: function(type) {\r\n      var parent = this\r\n\r\n      // check for parent\r\n      if(!parent.node.parentNode) return null\r\n\r\n      // get parent element\r\n      parent = SVG.adopt(parent.node.parentNode)\r\n\r\n      if(!type) return parent\r\n\r\n      // loop trough ancestors if type is given\r\n      while(parent && parent.node instanceof window.SVGElement){\r\n        if(typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent\r\n        if(!parent.node.parentNode || parent.node.parentNode.nodeName == '#document' || parent.node.parentNode.nodeName == '#document-fragment') return null // #759, #720\r\n        parent = SVG.adopt(parent.node.parentNode)\r\n      }\r\n    }\r\n    // Get parent document\r\n  , doc: function() {\r\n      return this instanceof SVG.Doc ? this : this.parent(SVG.Doc)\r\n    }\r\n    // return array of all ancestors of given type up to the root svg\r\n  , parents: function(type) {\r\n      var parents = [], parent = this\r\n\r\n      do{\r\n        parent = parent.parent(type)\r\n        if(!parent || !parent.node) break\r\n\r\n        parents.push(parent)\r\n      } while(parent.parent)\r\n\r\n      return parents\r\n    }\r\n    // matches the element vs a css selector\r\n  , matches: function(selector){\r\n      return matches(this.node, selector)\r\n    }\r\n    // Returns the svg node to call native svg methods on it\r\n  , native: function() {\r\n      return this.node\r\n    }\r\n    // Import raw svg\r\n  , svg: function(svg) {\r\n      // create temporary holder\r\n      var well = document.createElement('svg')\r\n\r\n      // act as a setter if svg is given\r\n      if (svg && this instanceof SVG.Parent) {\r\n        // dump raw svg\r\n        well.innerHTML = '<svg>' + svg.replace(/\\n/, '').replace(/<([\\w:-]+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'\r\n\r\n        // transplant nodes\r\n        for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\r\n          this.node.appendChild(well.firstChild.firstChild)\r\n\r\n      // otherwise act as a getter\r\n      } else {\r\n        // create a wrapping svg element in case of partial content\r\n        well.appendChild(svg = document.createElement('svg'))\r\n\r\n        // write svgjs data to the dom\r\n        this.writeDataToDom()\r\n\r\n        // insert a copy of this node\r\n        svg.appendChild(this.node.cloneNode(true))\r\n\r\n        // return target element\r\n        return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '')\r\n      }\r\n\r\n      return this\r\n    }\r\n  // write svgjs data to the dom\r\n  , writeDataToDom: function() {\r\n\r\n      // dump variables recursively\r\n      if(this.each || this.lines){\r\n        var fn = this.each ? this : this.lines();\r\n        fn.each(function(){\r\n          this.writeDataToDom()\r\n        })\r\n      }\r\n\r\n      // remove previously set data\r\n      this.node.removeAttribute('svgjs:data')\r\n\r\n      if(Object.keys(this.dom).length)\r\n        this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)) // see #428\r\n\r\n      return this\r\n    }\r\n  // set given data to the elements data property\r\n  , setData: function(o){\r\n      this.dom = o\r\n      return this\r\n    }\r\n  , is: function(obj){\r\n      return is(this, obj)\r\n    }\r\n  }\r\n})\r\n\nSVG.easing = {\r\n  '-': function(pos){return pos}\r\n, '<>':function(pos){return -Math.cos(pos * Math.PI) / 2 + 0.5}\r\n, '>': function(pos){return  Math.sin(pos * Math.PI / 2)}\r\n, '<': function(pos){return -Math.cos(pos * Math.PI / 2) + 1}\r\n}\r\n\r\nSVG.morph = function(pos){\r\n  return function(from, to) {\r\n    return new SVG.MorphObj(from, to).at(pos)\r\n  }\r\n}\r\n\r\nSVG.Situation = SVG.invent({\r\n\r\n  create: function(o){\r\n    this.init = false\r\n    this.reversed = false\r\n    this.reversing = false\r\n\r\n    this.duration = new SVG.Number(o.duration).valueOf()\r\n    this.delay = new SVG.Number(o.delay).valueOf()\r\n\r\n    this.start = +new Date() + this.delay\r\n    this.finish = this.start + this.duration\r\n    this.ease = o.ease\r\n\r\n    // this.loop is incremented from 0 to this.loops\r\n    // it is also incremented when in an infinite loop (when this.loops is true)\r\n    this.loop = 0\r\n    this.loops = false\r\n\r\n    this.animations = {\r\n      // functionToCall: [list of morphable objects]\r\n      // e.g. move: [SVG.Number, SVG.Number]\r\n    }\r\n\r\n    this.attrs = {\r\n      // holds all attributes which are not represented from a function svg.js provides\r\n      // e.g. someAttr: SVG.Number\r\n    }\r\n\r\n    this.styles = {\r\n      // holds all styles which should be animated\r\n      // e.g. fill-color: SVG.Color\r\n    }\r\n\r\n    this.transforms = [\r\n      // holds all transformations as transformation objects\r\n      // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\r\n    ]\r\n\r\n    this.once = {\r\n      // functions to fire at a specific position\r\n      // e.g. \"0.5\": function foo(){}\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\n\r\nSVG.FX = SVG.invent({\r\n\r\n  create: function(element) {\r\n    this._target = element\r\n    this.situations = []\r\n    this.active = false\r\n    this.situation = null\r\n    this.paused = false\r\n    this.lastPos = 0\r\n    this.pos = 0\r\n    // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\r\n    // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\r\n    this.absPos = 0\r\n    this._speed = 1\r\n  }\r\n\r\n, extend: {\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\r\n     * @param ease function || string Function which should be used for easing or easing keyword\r\n     * @param delay Number indicating the delay before the animation starts\r\n     * @return target || this\r\n     */\r\n    animate: function(o, ease, delay){\r\n\r\n      if(typeof o == 'object'){\r\n        ease = o.ease\r\n        delay = o.delay\r\n        o = o.duration\r\n      }\r\n\r\n      var situation = new SVG.Situation({\r\n        duration: o || 1000,\r\n        delay: delay || 0,\r\n        ease: SVG.easing[ease || '-'] || ease\r\n      })\r\n\r\n      this.queue(situation)\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * sets a delay before the next element of the queue is called\r\n     * @param delay Duration of delay in milliseconds\r\n     * @return this.target()\r\n     */\r\n  , delay: function(delay){\r\n      // The delay is performed by an empty situation with its duration\r\n      // attribute set to the duration of the delay\r\n      var situation = new SVG.Situation({\r\n        duration: delay,\r\n        delay: 0,\r\n        ease: SVG.easing['-']\r\n      })\r\n\r\n      return this.queue(situation)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param null || target SVG.Element which should be set as new target\r\n     * @return target || this\r\n     */\r\n  , target: function(target){\r\n      if(target && target instanceof SVG.Element){\r\n        this._target = target\r\n        return this\r\n      }\r\n\r\n      return this._target\r\n    }\r\n\r\n    // returns the absolute position at a given time\r\n  , timeToAbsPos: function(timestamp){\r\n      return (timestamp - this.situation.start) / (this.situation.duration/this._speed)\r\n    }\r\n\r\n    // returns the timestamp from a given absolute positon\r\n  , absPosToTime: function(absPos){\r\n      return this.situation.duration/this._speed * absPos + this.situation.start\r\n    }\r\n\r\n    // starts the animationloop\r\n  , startAnimFrame: function(){\r\n      this.stopAnimFrame()\r\n      this.animationFrame = window.requestAnimationFrame(function(){ this.step() }.bind(this))\r\n    }\r\n\r\n    // cancels the animationframe\r\n  , stopAnimFrame: function(){\r\n      window.cancelAnimationFrame(this.animationFrame)\r\n    }\r\n\r\n    // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\r\n  , start: function(){\r\n      // dont start if already started\r\n      if(!this.active && this.situation){\r\n        this.active = true\r\n        this.startCurrent()\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // start the current situation\r\n  , startCurrent: function(){\r\n      this.situation.start = +new Date + this.situation.delay/this._speed\r\n      this.situation.finish = this.situation.start + this.situation.duration/this._speed\r\n      return this.initAnimations().step()\r\n    }\r\n\r\n    /**\r\n     * adds a function / Situation to the animation queue\r\n     * @param fn function / situation to add\r\n     * @return this\r\n     */\r\n  , queue: function(fn){\r\n      if(typeof fn == 'function' || fn instanceof SVG.Situation)\r\n        this.situations.push(fn)\r\n\r\n      if(!this.situation) this.situation = this.situations.shift()\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * pulls next element from the queue and execute it\r\n     * @return this\r\n     */\r\n  , dequeue: function(){\r\n      // stop current animation\r\n      this.stop()\r\n\r\n      // get next animation from queue\r\n      this.situation = this.situations.shift()\r\n\r\n      if(this.situation){\r\n        if(this.situation instanceof SVG.Situation) {\r\n          this.start()\r\n        } else {\r\n          // If it is not a SVG.Situation, then it is a function, we execute it\r\n          this.situation.call(this)\r\n        }\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // updates all animations to the current state of the element\r\n    // this is important when one property could be changed from another property\r\n  , initAnimations: function() {\r\n      var i, j, source\r\n      var s = this.situation\r\n\r\n      if(s.init) return this\r\n\r\n      for(i in s.animations){\r\n        source = this.target()[i]()\r\n\r\n        if(!Array.isArray(source)) {\r\n          source = [source]\r\n        }\r\n\r\n        if(!Array.isArray(s.animations[i])) {\r\n          s.animations[i] = [s.animations[i]]\r\n        }\r\n\r\n        //if(s.animations[i].length > source.length) {\r\n        //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\r\n        //}\r\n\r\n        for(j = source.length; j--;) {\r\n          // The condition is because some methods return a normal number instead\r\n          // of a SVG.Number\r\n          if(s.animations[i][j] instanceof SVG.Number)\r\n            source[j] = new SVG.Number(source[j])\r\n\r\n          s.animations[i][j] = source[j].morph(s.animations[i][j])\r\n        }\r\n      }\r\n\r\n      for(i in s.attrs){\r\n        s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i])\r\n      }\r\n\r\n      for(i in s.styles){\r\n        s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i])\r\n      }\r\n\r\n      s.initialTransformation = this.target().matrixify()\r\n\r\n      s.init = true\r\n      return this\r\n    }\r\n  , clearQueue: function(){\r\n      this.situations = []\r\n      return this\r\n    }\r\n  , clearCurrent: function(){\r\n      this.situation = null\r\n      return this\r\n    }\r\n    /** stops the animation immediately\r\n     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\r\n     * @param clearQueue A Boolean indicating whether to remove queued animation as well.\r\n     * @return this\r\n     */\r\n  , stop: function(jumpToEnd, clearQueue){\r\n      var active = this.active\r\n      this.active = false\r\n\r\n      if(clearQueue){\r\n        this.clearQueue()\r\n      }\r\n\r\n      if(jumpToEnd && this.situation){\r\n        // initialize the situation if it was not\r\n        !active && this.startCurrent()\r\n        this.atEnd()\r\n      }\r\n\r\n      this.stopAnimFrame()\r\n\r\n      return this.clearCurrent()\r\n    }\r\n\r\n    /** resets the element to the state where the current element has started\r\n     * @return this\r\n     */\r\n  , reset: function(){\r\n      if(this.situation){\r\n        var temp = this.situation\r\n        this.stop()\r\n        this.situation = temp\r\n        this.atStart()\r\n      }\r\n      return this\r\n    }\r\n\r\n    // Stop the currently-running animation, remove all queued animations, and complete all animations for the element.\r\n  , finish: function(){\r\n\r\n      this.stop(true, false)\r\n\r\n      while(this.dequeue().situation && this.stop(true, false));\r\n\r\n      this.clearQueue().clearCurrent()\r\n\r\n      return this\r\n    }\r\n\r\n    // set the internal animation pointer at the start position, before any loops, and updates the visualisation\r\n  , atStart: function() {\r\n      return this.at(0, true)\r\n    }\r\n\r\n    // set the internal animation pointer at the end position, after all the loops, and updates the visualisation\r\n  , atEnd: function() {\r\n      if (this.situation.loops === true) {\r\n        // If in a infinite loop, we end the current iteration\r\n        this.situation.loops = this.situation.loop + 1\r\n      }\r\n\r\n      if(typeof this.situation.loops == 'number') {\r\n        // If performing a finite number of loops, we go after all the loops\r\n        return this.at(this.situation.loops, true)\r\n      } else {\r\n        // If no loops, we just go at the end\r\n        return this.at(1, true)\r\n      }\r\n    }\r\n\r\n    // set the internal animation pointer to the specified position and updates the visualisation\r\n    // if isAbsPos is true, pos is treated as an absolute position\r\n  , at: function(pos, isAbsPos){\r\n      var durDivSpd = this.situation.duration/this._speed\r\n\r\n      this.absPos = pos\r\n      // If pos is not an absolute position, we convert it into one\r\n      if (!isAbsPos) {\r\n        if (this.situation.reversed) this.absPos = 1 - this.absPos\r\n        this.absPos += this.situation.loop\r\n      }\r\n\r\n      this.situation.start = +new Date - this.absPos * durDivSpd\r\n      this.situation.finish = this.situation.start + durDivSpd\r\n\r\n      return this.step(true)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the speed of the animations\r\n     * @param speed null || Number The new speed of the animations\r\n     * @return Number || this\r\n     */\r\n  , speed: function(speed){\r\n      if (speed === 0) return this.pause()\r\n\r\n      if (speed) {\r\n        this._speed = speed\r\n        // We use an absolute position here so that speed can affect the delay before the animation\r\n        return this.at(this.absPos, true)\r\n      } else return this._speed\r\n    }\r\n\r\n    // Make loopable\r\n  , loop: function(times, reverse) {\r\n      var c = this.last()\r\n\r\n      // store total loops\r\n      c.loops = (times != null) ? times : true\r\n      c.loop = 0\r\n\r\n      if(reverse) c.reversing = true\r\n      return this\r\n    }\r\n\r\n    // pauses the animation\r\n  , pause: function(){\r\n      this.paused = true\r\n      this.stopAnimFrame()\r\n\r\n      return this\r\n    }\r\n\r\n    // unpause the animation\r\n  , play: function(){\r\n      if(!this.paused) return this\r\n      this.paused = false\r\n      // We use an absolute position here so that the delay before the animation can be paused\r\n      return this.at(this.absPos, true)\r\n    }\r\n\r\n    /**\r\n     * toggle or set the direction of the animation\r\n     * true sets direction to backwards while false sets it to forwards\r\n     * @param reversed Boolean indicating whether to reverse the animation or not (default: toggle the reverse status)\r\n     * @return this\r\n     */\r\n  , reverse: function(reversed){\r\n      var c = this.last()\r\n\r\n      if(typeof reversed == 'undefined') c.reversed = !c.reversed\r\n      else c.reversed = reversed\r\n\r\n      return this\r\n    }\r\n\r\n\r\n    /**\r\n     * returns a float from 0-1 indicating the progress of the current animation\r\n     * @param eased Boolean indicating whether the returned position should be eased or not\r\n     * @return number\r\n     */\r\n  , progress: function(easeIt){\r\n      return easeIt ? this.situation.ease(this.pos) : this.pos\r\n    }\r\n\r\n    /**\r\n     * adds a callback function which is called when the current animation is finished\r\n     * @param fn Function which should be executed as callback\r\n     * @return number\r\n     */\r\n  , after: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function wrapper(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, c)\r\n              this.off('finished.fx', wrapper) // prevent memory leak\r\n            }\r\n          }\r\n\r\n      this.target().on('finished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // adds a callback which is called whenever one animation step is performed\r\n  , during: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c)\r\n            }\r\n          }\r\n\r\n      // see above\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.after(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls after ALL animations in the queue are finished\r\n  , afterAll: function(fn){\r\n      var wrapper = function wrapper(e){\r\n            fn.call(this)\r\n            this.off('allfinished.fx', wrapper)\r\n          }\r\n\r\n      // see above\r\n      this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls on every animation step for all animations\r\n  , duringAll: function(fn){\r\n      var wrapper = function(e){\r\n            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, e.detail.situation)\r\n          }\r\n\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.afterAll(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n  , last: function(){\r\n      return this.situations.length ? this.situations[this.situations.length-1] : this.situation\r\n    }\r\n\r\n    // adds one property to the animations\r\n  , add: function(method, args, type){\r\n      this.last()[type || 'animations'][method] = args\r\n      return this._callStart()\r\n    }\r\n\r\n    /** perform one step of the animation\r\n     *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\r\n     *  @return this\r\n     */\r\n  , step: function(ignoreTime){\r\n\r\n      // convert current time to an absolute position\r\n      if(!ignoreTime) this.absPos = this.timeToAbsPos(+new Date)\r\n\r\n      // This part convert an absolute position to a position\r\n      if(this.situation.loops !== false) {\r\n        var absPos, absPosInt, lastLoop\r\n\r\n        // If the absolute position is below 0, we just treat it as if it was 0\r\n        absPos = Math.max(this.absPos, 0)\r\n        absPosInt = Math.floor(absPos)\r\n\r\n        if(this.situation.loops === true || absPosInt < this.situation.loops) {\r\n          this.pos = absPos - absPosInt\r\n          lastLoop = this.situation.loop\r\n          this.situation.loop = absPosInt\r\n        } else {\r\n          this.absPos = this.situation.loops\r\n          this.pos = 1\r\n          // The -1 here is because we don't want to toggle reversed when all the loops have been completed\r\n          lastLoop = this.situation.loop - 1\r\n          this.situation.loop = this.situation.loops\r\n        }\r\n\r\n        if(this.situation.reversing) {\r\n          // Toggle reversed if an odd number of loops as occured since the last call of step\r\n          this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2)\r\n        }\r\n\r\n      } else {\r\n        // If there are no loop, the absolute position must not be above 1\r\n        this.absPos = Math.min(this.absPos, 1)\r\n        this.pos = this.absPos\r\n      }\r\n\r\n      // while the absolute position can be below 0, the position must not be below 0\r\n      if(this.pos < 0) this.pos = 0\r\n\r\n      if(this.situation.reversed) this.pos = 1 - this.pos\r\n\r\n\r\n      // apply easing\r\n      var eased = this.situation.ease(this.pos)\r\n\r\n      // call once-callbacks\r\n      for(var i in this.situation.once){\r\n        if(i > this.lastPos && i <= eased){\r\n          this.situation.once[i].call(this.target(), this.pos, eased)\r\n          delete this.situation.once[i]\r\n        }\r\n      }\r\n\r\n      // fire during callback with position, eased position and current situation as parameter\r\n      if(this.active) this.target().fire('during', {pos: this.pos, eased: eased, fx: this, situation: this.situation})\r\n\r\n      // the user may call stop or finish in the during callback\r\n      // so make sure that we still have a valid situation\r\n      if(!this.situation){\r\n        return this\r\n      }\r\n\r\n      // apply the actual animation to every property\r\n      this.eachAt()\r\n\r\n      // do final code when situation is finished\r\n      if((this.pos == 1 && !this.situation.reversed) || (this.situation.reversed && this.pos == 0)){\r\n\r\n        // stop animation callback\r\n        this.stopAnimFrame()\r\n\r\n        // fire finished callback with current situation as parameter\r\n        this.target().fire('finished', {fx:this, situation: this.situation})\r\n\r\n        if(!this.situations.length){\r\n          this.target().fire('allfinished')\r\n\r\n          // Recheck the length since the user may call animate in the afterAll callback\r\n          if(!this.situations.length){\r\n            this.target().off('.fx') // there shouldnt be any binding left, but to make sure...\r\n            this.active = false\r\n          }\r\n        }\r\n\r\n        // start next animation\r\n        if(this.active) this.dequeue()\r\n        else this.clearCurrent()\r\n\r\n      }else if(!this.paused && this.active){\r\n        // we continue animating when we are not at the end\r\n        this.startAnimFrame()\r\n      }\r\n\r\n      // save last eased position for once callback triggering\r\n      this.lastPos = eased\r\n      return this\r\n\r\n    }\r\n\r\n    // calculates the step for every property and calls block with it\r\n  , eachAt: function(){\r\n      var i, len, at, self = this, target = this.target(), s = this.situation\r\n\r\n      // apply animations which can be called trough a method\r\n      for(i in s.animations){\r\n\r\n        at = [].concat(s.animations[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target[i].apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with attr()\r\n      for(i in s.attrs){\r\n\r\n        at = [i].concat(s.attrs[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.attr.apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with style()\r\n      for(i in s.styles){\r\n\r\n        at = [i].concat(s.styles[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.style.apply(target, at)\r\n\r\n      }\r\n\r\n      // animate initialTransformation which has to be chained\r\n      if(s.transforms.length){\r\n\r\n        // get initial initialTransformation\r\n        at = s.initialTransformation\r\n        for(i = 0, len = s.transforms.length; i < len; i++){\r\n\r\n          // get next transformation in chain\r\n          var a = s.transforms[i]\r\n\r\n          // multiply matrix directly\r\n          if(a instanceof SVG.Matrix){\r\n\r\n            if(a.relative){\r\n              at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)))\r\n            }else{\r\n              at = at.morph(a).at(s.ease(this.pos))\r\n            }\r\n            continue\r\n          }\r\n\r\n          // when transformation is absolute we have to reset the needed transformation first\r\n          if(!a.relative)\r\n            a.undo(at.extract())\r\n\r\n          // and reapply it after\r\n          at = at.multiply(a.at(s.ease(this.pos)))\r\n\r\n        }\r\n\r\n        // set new matrix on element\r\n        target.matrix(at)\r\n      }\r\n\r\n      return this\r\n\r\n    }\r\n\r\n\r\n    // adds an once-callback which is called at a specific position and never again\r\n  , once: function(pos, fn, isEased){\r\n      var c = this.last()\r\n      if(!isEased) pos = c.ease(pos)\r\n\r\n      c.once[pos] = fn\r\n\r\n      return this\r\n    }\r\n\r\n  , _callStart: function() {\r\n      setTimeout(function(){this.start()}.bind(this), 0)\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n, parent: SVG.Element\r\n\r\n  // Add method to parent elements\r\n, construct: {\r\n    // Get fx module or create a new one, then animate with given duration and ease\r\n    animate: function(o, ease, delay) {\r\n      return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay)\r\n    }\r\n  , delay: function(delay){\r\n      return (this.fx || (this.fx = new SVG.FX(this))).delay(delay)\r\n    }\r\n  , stop: function(jumpToEnd, clearQueue) {\r\n      if (this.fx)\r\n        this.fx.stop(jumpToEnd, clearQueue)\r\n\r\n      return this\r\n    }\r\n  , finish: function() {\r\n      if (this.fx)\r\n        this.fx.finish()\r\n\r\n      return this\r\n    }\r\n    // Pause current animation\r\n  , pause: function() {\r\n      if (this.fx)\r\n        this.fx.pause()\r\n\r\n      return this\r\n    }\r\n    // Play paused current animation\r\n  , play: function() {\r\n      if (this.fx)\r\n        this.fx.play()\r\n\r\n      return this\r\n    }\r\n    // Set/Get the speed of the animations\r\n  , speed: function(speed) {\r\n      if (this.fx)\r\n        if (speed == null)\r\n          return this.fx.speed()\r\n        else\r\n          this.fx.speed(speed)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\n// MorphObj is used whenever no morphable object is given\r\nSVG.MorphObj = SVG.invent({\r\n\r\n  create: function(from, to){\r\n    // prepare color for morphing\r\n    if(SVG.Color.isColor(to)) return new SVG.Color(from).morph(to)\r\n    // check if we have a list of values\r\n    if(SVG.regex.delimiter.test(from)) {\r\n      // prepare path for morphing\r\n      if(SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to)\r\n      // prepare value list for morphing\r\n      else return new SVG.Array(from).morph(to)\r\n    }\r\n    // prepare number for morphing\r\n    if(SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to)\r\n\r\n    // prepare for plain morphing\r\n    this.value = from\r\n    this.destination = to\r\n  }\r\n\r\n, extend: {\r\n    at: function(pos, real){\r\n      return real < 1 ? this.value : this.destination\r\n    },\r\n\r\n    valueOf: function(){\r\n      return this.value\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  // Add animatable attributes\r\n  attr: function(a, v, relative) {\r\n    // apply attributes individually\r\n    if (typeof a == 'object') {\r\n      for (var key in a)\r\n        this.attr(key, a[key])\r\n\r\n    } else {\r\n      this.add(a, v, 'attrs')\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable styles\r\n, style: function(s, v) {\r\n    if (typeof s == 'object')\r\n      for (var key in s)\r\n        this.style(key, s[key])\r\n\r\n    else\r\n      this.add(s, v, 'styles')\r\n\r\n    return this\r\n  }\r\n  // Animatable x-axis\r\n, x: function(x, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({x:x}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(x)\r\n    num.relative = relative\r\n    return this.add('x', num)\r\n  }\r\n  // Animatable y-axis\r\n, y: function(y, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({y:y}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(y)\r\n    num.relative = relative\r\n    return this.add('y', num)\r\n  }\r\n  // Animatable center x-axis\r\n, cx: function(x) {\r\n    return this.add('cx', new SVG.Number(x))\r\n  }\r\n  // Animatable center y-axis\r\n, cy: function(y) {\r\n    return this.add('cy', new SVG.Number(y))\r\n  }\r\n  // Add animatable move\r\n, move: function(x, y) {\r\n    return this.x(x).y(y)\r\n  }\r\n  // Add animatable center\r\n, center: function(x, y) {\r\n    return this.cx(x).cy(y)\r\n  }\r\n  // Add animatable size\r\n, size: function(width, height) {\r\n    if (this.target() instanceof SVG.Text) {\r\n      // animate font size for Text elements\r\n      this.attr('font-size', width)\r\n\r\n    } else {\r\n      // animate bbox based size for all other elements\r\n      var box\r\n\r\n      if(!width || !height){\r\n        box = this.target().bbox()\r\n      }\r\n\r\n      if(!width){\r\n        width = box.width / box.height  * height\r\n      }\r\n\r\n      if(!height){\r\n        height = box.height / box.width  * width\r\n      }\r\n\r\n      this.add('width' , new SVG.Number(width))\r\n          .add('height', new SVG.Number(height))\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable width\r\n, width: function(width) {\r\n    return this.add('width', new SVG.Number(width))\r\n  }\r\n  // Add animatable height\r\n, height: function(height) {\r\n    return this.add('height', new SVG.Number(height))\r\n  }\r\n  // Add animatable plot\r\n, plot: function(a, b, c, d) {\r\n    // Lines can be plotted with 4 arguments\r\n    if(arguments.length == 4) {\r\n      return this.plot([a, b, c, d])\r\n    }\r\n\r\n    return this.add('plot', new (this.target().morphArray)(a))\r\n  }\r\n  // Add leading method\r\n, leading: function(value) {\r\n    return this.target().leading ?\r\n      this.add('leading', new SVG.Number(value)) :\r\n      this\r\n  }\r\n  // Add animatable viewbox\r\n, viewbox: function(x, y, width, height) {\r\n    if (this.target() instanceof SVG.Container) {\r\n      this.add('viewbox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n    return this\r\n  }\r\n, update: function(o) {\r\n    if (this.target() instanceof SVG.Stop) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        return this.update({\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        })\r\n      }\r\n\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', o.offset)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\r\n\nSVG.Box = SVG.invent({\r\n  create: function(x, y, width, height) {\r\n    if (typeof x == 'object' && !(x instanceof SVG.Element)) {\r\n      // chromes getBoundingClientRect has no x and y property\r\n      return SVG.Box.call(this, x.left != null ? x.left : x.x , x.top != null ? x.top : x.y, x.width, x.height)\r\n    } else if (arguments.length == 4) {\r\n      this.x = x\r\n      this.y = y\r\n      this.width = width\r\n      this.height = height\r\n    }\r\n\r\n    // add center, right, bottom...\r\n    fullBox(this)\r\n  }\r\n, extend: {\r\n    // Merge rect box with another, return a new instance\r\n    merge: function(box) {\r\n      var b = new this.constructor()\r\n\r\n      // merge boxes\r\n      b.x      = Math.min(this.x, box.x)\r\n      b.y      = Math.min(this.y, box.y)\r\n      b.width  = Math.max(this.x + this.width,  box.x + box.width)  - b.x\r\n      b.height = Math.max(this.y + this.height, box.y + box.height) - b.y\r\n\r\n      return fullBox(b)\r\n    }\r\n\r\n  , transform: function(m) {\r\n      var xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, p, bbox\r\n\r\n      var pts = [\r\n        new SVG.Point(this.x, this.y),\r\n        new SVG.Point(this.x2, this.y),\r\n        new SVG.Point(this.x, this.y2),\r\n        new SVG.Point(this.x2, this.y2)\r\n      ]\r\n\r\n      pts.forEach(function(p) {\r\n        p = p.transform(m)\r\n        xMin = Math.min(xMin,p.x)\r\n        xMax = Math.max(xMax,p.x)\r\n        yMin = Math.min(yMin,p.y)\r\n        yMax = Math.max(yMax,p.y)\r\n      })\r\n\r\n      bbox = new this.constructor()\r\n      bbox.x = xMin\r\n      bbox.width = xMax-xMin\r\n      bbox.y = yMin\r\n      bbox.height = yMax-yMin\r\n\r\n      fullBox(bbox)\r\n\r\n      return bbox\r\n    }\r\n  }\r\n})\r\n\r\nSVG.BBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    // get values if element is given\r\n    if (element instanceof SVG.Element) {\r\n      var box\r\n\r\n      // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered\r\n      try {\r\n\r\n        if (!document.documentElement.contains){\r\n          // This is IE - it does not support contains() for top-level SVGs\r\n          var topParent = element.node\r\n          while (topParent.parentNode){\r\n            topParent = topParent.parentNode\r\n          }\r\n          if (topParent != document) throw new Exception('Element not in the dom')\r\n        } else {\r\n          // the element is NOT in the dom, throw error\r\n          if(!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')\r\n        }\r\n\r\n        // find native bbox\r\n        box = element.node.getBBox()\r\n      } catch(e) {\r\n        if(element instanceof SVG.Shape){\r\n          var clone = element.clone(SVG.parser.draw.instance).show()\r\n          box = clone.node.getBBox()\r\n          clone.remove()\r\n        }else{\r\n          box = {\r\n            x:      element.node.clientLeft\r\n          , y:      element.node.clientTop\r\n          , width:  element.node.clientWidth\r\n          , height: element.node.clientHeight\r\n          }\r\n        }\r\n      }\r\n\r\n      SVG.Box.call(this, box)\r\n    }\r\n\r\n  }\r\n\r\n  // Define ancestor\r\n, inherit: SVG.Box\r\n\r\n  // Define Parent\r\n, parent: SVG.Element\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get bounding box\r\n    bbox: function() {\r\n      return new SVG.BBox(this)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.BBox.prototype.constructor = SVG.BBox\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  tbox: function(){\r\n    console.warn('Use of TBox is deprecated and mapped to RBox. Use .rbox() instead.')\r\n    return this.rbox(this.doc())\r\n  }\r\n})\r\n\r\nSVG.RBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    if (element instanceof SVG.Element) {\r\n      SVG.Box.call(this, element.node.getBoundingClientRect())\r\n    }\r\n  }\r\n\r\n, inherit: SVG.Box\r\n\r\n  // define Parent\r\n, parent: SVG.Element\r\n\r\n, extend: {\r\n    addOffset: function() {\r\n      // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\r\n      this.x += window.pageXOffset\r\n      this.y += window.pageYOffset\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get rect box\r\n    rbox: function(el) {\r\n      if (el) return new SVG.RBox(this).transform(el.screenCTM().inverse())\r\n      return new SVG.RBox(this).addOffset()\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.RBox.prototype.constructor = SVG.RBox\r\n\nSVG.Matrix = SVG.invent({\r\n  // Initialize\r\n  create: function(source) {\r\n    var i, base = arrayToMatrix([1, 0, 0, 1, 0, 0])\r\n\r\n    // ensure source as object\r\n    source = source instanceof SVG.Element ?\r\n      source.matrixify() :\r\n    typeof source === 'string' ?\r\n      arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) :\r\n    arguments.length == 6 ?\r\n      arrayToMatrix([].slice.call(arguments)) :\r\n    Array.isArray(source) ?\r\n      arrayToMatrix(source) :\r\n    typeof source === 'object' ?\r\n      source : base\r\n\r\n    // merge source\r\n    for (i = abcdef.length - 1; i >= 0; --i)\r\n      this[abcdef[i]] = source[abcdef[i]] != null ?\r\n        source[abcdef[i]] : base[abcdef[i]]\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Extract individual transformations\r\n    extract: function() {\r\n      // find delta transform points\r\n      var px    = deltaTransformPoint(this, 0, 1)\r\n        , py    = deltaTransformPoint(this, 1, 0)\r\n        , skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90\r\n\r\n      return {\r\n        // translation\r\n        x:        this.e\r\n      , y:        this.f\r\n      , transformedX:(this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , transformedY:(this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // skew\r\n      , skewX:    -skewX\r\n      , skewY:    180 / Math.PI * Math.atan2(py.y, py.x)\r\n        // scale\r\n      , scaleX:   Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , scaleY:   Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // rotation\r\n      , rotation: skewX\r\n      , a: this.a\r\n      , b: this.b\r\n      , c: this.c\r\n      , d: this.d\r\n      , e: this.e\r\n      , f: this.f\r\n      , matrix: new SVG.Matrix(this)\r\n      }\r\n    }\r\n    // Clone matrix\r\n  , clone: function() {\r\n      return new SVG.Matrix(this)\r\n    }\r\n    // Morph one matrix into another\r\n  , morph: function(matrix) {\r\n      // store new destination\r\n      this.destination = new SVG.Matrix(matrix)\r\n\r\n      return this\r\n    }\r\n    // Get morphed matrix at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var matrix = new SVG.Matrix({\r\n        a: this.a + (this.destination.a - this.a) * pos\r\n      , b: this.b + (this.destination.b - this.b) * pos\r\n      , c: this.c + (this.destination.c - this.c) * pos\r\n      , d: this.d + (this.destination.d - this.d) * pos\r\n      , e: this.e + (this.destination.e - this.e) * pos\r\n      , f: this.f + (this.destination.f - this.f) * pos\r\n      })\r\n\r\n      return matrix\r\n    }\r\n    // Multiplies by given matrix\r\n  , multiply: function(matrix) {\r\n      return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))\r\n    }\r\n    // Inverses matrix\r\n  , inverse: function() {\r\n      return new SVG.Matrix(this.native().inverse())\r\n    }\r\n    // Translate matrix\r\n  , translate: function(x, y) {\r\n      return new SVG.Matrix(this.native().translate(x || 0, y || 0))\r\n    }\r\n    // Scale matrix\r\n  , scale: function(x, y, cx, cy) {\r\n      // support uniformal scale\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0))\r\n    }\r\n    // Rotate matrix\r\n  , rotate: function(r, cx, cy) {\r\n      // convert degrees to radians\r\n      r = SVG.utils.radians(r)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0))\r\n    }\r\n    // Flip matrix on x or y, at a given offset\r\n  , flip: function(a, o) {\r\n      return a == 'x' ?\r\n          this.scale(-1, 1, o, 0) :\r\n        a == 'y' ?\r\n          this.scale(1, -1, 0, o) :\r\n          this.scale(-1, -1, a, o != null ? o : a)\r\n    }\r\n    // Skew\r\n  , skew: function(x, y, cx, cy) {\r\n      // support uniformal skew\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      // convert degrees to radians\r\n      x = SVG.utils.radians(x)\r\n      y = SVG.utils.radians(y)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(1, Math.tan(y), Math.tan(x), 1, 0, 0))\r\n    }\r\n    // SkewX\r\n  , skewX: function(x, cx, cy) {\r\n      return this.skew(x, 0, cx, cy)\r\n    }\r\n    // SkewY\r\n  , skewY: function(y, cx, cy) {\r\n      return this.skew(0, y, cx, cy)\r\n    }\r\n    // Transform around a center point\r\n  , around: function(cx, cy, matrix) {\r\n      return this\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0))\r\n        .multiply(matrix)\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0))\r\n    }\r\n    // Convert to native SVGMatrix\r\n  , native: function() {\r\n      // create new matrix\r\n      var matrix = SVG.parser.native.createSVGMatrix()\r\n\r\n      // update with current values\r\n      for (var i = abcdef.length - 1; i >= 0; i--)\r\n        matrix[abcdef[i]] = this[abcdef[i]]\r\n\r\n      return matrix\r\n    }\r\n    // Convert matrix to string\r\n  , toString: function() {\r\n      // Construct the matrix directly, avoid values that are too small\r\n      return 'matrix(' + float32String(this.a) + ',' + float32String(this.b)\r\n        + ',' + float32String(this.c) + ',' + float32String(this.d)\r\n        + ',' + float32String(this.e) + ',' + float32String(this.f)\r\n        + ')'\r\n    }\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Element\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Get current matrix\r\n    ctm: function() {\r\n      return new SVG.Matrix(this.node.getCTM())\r\n    },\r\n    // Get current screen matrix\r\n    screenCTM: function() {\r\n      /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\r\n         This is needed because FF does not return the transformation matrix\r\n         for the inner coordinate system when getScreenCTM() is called on nested svgs.\r\n         However all other Browsers do that */\r\n      if(this instanceof SVG.Nested) {\r\n        var rect = this.rect(1,1)\r\n        var m = rect.node.getScreenCTM()\r\n        rect.remove()\r\n        return new SVG.Matrix(m)\r\n      }\r\n      return new SVG.Matrix(this.node.getScreenCTM())\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\nSVG.Point = SVG.invent({\r\n  // Initialize\r\n  create: function(x,y) {\r\n    var i, source, base = {x:0, y:0}\r\n\r\n    // ensure source as object\r\n    source = Array.isArray(x) ?\r\n      {x:x[0], y:x[1]} :\r\n    typeof x === 'object' ?\r\n      {x:x.x, y:x.y} :\r\n    x != null ?\r\n      {x:x, y:(y != null ? y : x)} : base // If y has no value, then x is used has its value\r\n\r\n    // merge source\r\n    this.x = source.x\r\n    this.y = source.y\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Clone point\r\n    clone: function() {\r\n      return new SVG.Point(this)\r\n    }\r\n    // Morph one point into another\r\n  , morph: function(x, y) {\r\n      // store new destination\r\n      this.destination = new SVG.Point(x, y)\r\n\r\n      return this\r\n    }\r\n    // Get morphed point at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var point = new SVG.Point({\r\n        x: this.x + (this.destination.x - this.x) * pos\r\n      , y: this.y + (this.destination.y - this.y) * pos\r\n      })\r\n\r\n      return point\r\n    }\r\n    // Convert to native SVGPoint\r\n  , native: function() {\r\n      // create new point\r\n      var point = SVG.parser.native.createSVGPoint()\r\n\r\n      // update with current values\r\n      point.x = this.x\r\n      point.y = this.y\r\n\r\n      return point\r\n    }\r\n    // transform point with matrix\r\n  , transform: function(matrix) {\r\n      return new SVG.Point(this.native().matrixTransform(matrix.native()))\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n\r\n  // Get point\r\n  point: function(x, y) {\r\n    return new SVG.Point(x,y).transform(this.screenCTM().inverse());\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Set svg element attribute\r\n  attr: function(a, v, n) {\r\n    // act as full getter\r\n    if (a == null) {\r\n      // get an object of attributes\r\n      a = {}\r\n      v = this.node.attributes\r\n      for (n = v.length - 1; n >= 0; n--)\r\n        a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue\r\n\r\n      return a\r\n\r\n    } else if (typeof a == 'object') {\r\n      // apply every attribute individually if an object is passed\r\n      for (v in a) this.attr(v, a[v])\r\n\r\n    } else if (v === null) {\r\n        // remove value\r\n        this.node.removeAttribute(a)\r\n\r\n    } else if (v == null) {\r\n      // act as a getter if the first and only argument is not an object\r\n      v = this.node.getAttribute(a)\r\n      return v == null ?\r\n        SVG.defaults.attrs[a] :\r\n      SVG.regex.isNumber.test(v) ?\r\n        parseFloat(v) : v\r\n\r\n    } else {\r\n      // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\r\n      if (a == 'stroke-width')\r\n        this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null)\r\n      else if (a == 'stroke')\r\n        this._stroke = v\r\n\r\n      // convert image fill and stroke to patterns\r\n      if (a == 'fill' || a == 'stroke') {\r\n        if (SVG.regex.isImage.test(v))\r\n          v = this.doc().defs().image(v, 0, 0)\r\n\r\n        if (v instanceof SVG.Image)\r\n          v = this.doc().defs().pattern(0, 0, function() {\r\n            this.add(v)\r\n          })\r\n      }\r\n\r\n      // ensure correct numeric values (also accepts NaN and Infinity)\r\n      if (typeof v === 'number')\r\n        v = new SVG.Number(v)\r\n\r\n      // ensure full hex color\r\n      else if (SVG.Color.isColor(v))\r\n        v = new SVG.Color(v)\r\n\r\n      // parse array values\r\n      else if (Array.isArray(v))\r\n        v = new SVG.Array(v)\r\n\r\n      // if the passed attribute is leading...\r\n      if (a == 'leading') {\r\n        // ... call the leading method instead\r\n        if (this.leading)\r\n          this.leading(v)\r\n      } else {\r\n        // set given attribute on node\r\n        typeof n === 'string' ?\r\n          this.node.setAttributeNS(n, a, v.toString()) :\r\n          this.node.setAttribute(a, v.toString())\r\n      }\r\n\r\n      // rebuild if required\r\n      if (this.rebuild && (a == 'font-size' || a == 'x'))\r\n        this.rebuild(a, v)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Add transformations\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // get current matrix\r\n    matrix = new SVG.Matrix(target)\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.multiply(new SVG.Matrix(o)) :\r\n        // absolute\r\n        new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.rotate(o.rotation, o.cx, o.cy) :\r\n        // absolute\r\n        matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      if (!relative) {\r\n        // absolute; multiply inversed values\r\n        var e = matrix.extract()\r\n        o.scaleX = o.scaleX * 1 / e.scaleX\r\n        o.scaleY = o.scaleY * 1 / e.scaleY\r\n      }\r\n\r\n      matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skew != null || o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skew != null ? o.skew : o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skew != null ? o.skew : o.skewY != null ? o.skewY : 0\r\n\r\n      if (!relative) {\r\n        // absolute; reset skew values\r\n        var e = matrix.extract()\r\n        matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse())\r\n      }\r\n\r\n      matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      if (relative) {\r\n        // relative\r\n        matrix = matrix.translate(o.x, o.y)\r\n      } else {\r\n        // absolute\r\n        if (o.x != null) matrix.e = o.x\r\n        if (o.y != null) matrix.f = o.y\r\n      }\r\n    }\r\n\r\n    return this.attr('transform', matrix)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this.target()\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = new SVG.Rotate(o.rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      matrix = new SVG.Scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skewY != null ? o.skewY : 0\r\n\r\n      matrix = new SVG.Skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      matrix = new SVG.Translate(o.x, o.y)\r\n    }\r\n\r\n    if(!matrix) return this\r\n\r\n    matrix.relative = relative\r\n\r\n    this.last().transforms.push(matrix)\r\n\r\n    return this._callStart()\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Reset all transformations\r\n  untransform: function() {\r\n    return this.attr('transform', null)\r\n  },\r\n  // merge the whole transformation chain into one matrix and returns it\r\n  matrixify: function() {\r\n\r\n    var matrix = (this.attr('transform') || '')\r\n      // split transformations\r\n      .split(SVG.regex.transforms).slice(0,-1).map(function(str){\r\n        // generate key => value pairs\r\n        var kv = str.trim().split('(')\r\n        return [kv[0], kv[1].split(SVG.regex.delimiter).map(function(str){ return parseFloat(str) })]\r\n      })\r\n      // merge every transformation into one matrix\r\n      .reduce(function(matrix, transform){\r\n\r\n        if(transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]))\r\n        return matrix[transform[0]].apply(matrix, transform[1])\r\n\r\n      }, new SVG.Matrix())\r\n\r\n    return matrix\r\n  },\r\n  // add an element to another parent without changing the visual representation on the screen\r\n  toParent: function(parent) {\r\n    if(this == parent) return this\r\n    var ctm = this.screenCTM()\r\n    var pCtm = parent.screenCTM().inverse()\r\n\r\n    this.addTo(parent).untransform().transform(pCtm.multiply(ctm))\r\n\r\n    return this\r\n  },\r\n  // same as above with parent equals root-svg\r\n  toDoc: function() {\r\n    return this.toParent(this.doc())\r\n  }\r\n\r\n})\r\n\r\nSVG.Transformation = SVG.invent({\r\n\r\n  create: function(source, inversed){\r\n\r\n    if(arguments.length > 1 && typeof inversed != 'boolean'){\r\n      return this.constructor.call(this, [].slice.call(arguments))\r\n    }\r\n\r\n    if(Array.isArray(source)){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[i]\r\n      }\r\n    } else if(typeof source == 'object'){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[this.arguments[i]]\r\n      }\r\n    }\r\n\r\n    this.inversed = false\r\n\r\n    if(inversed === true){\r\n      this.inversed = true\r\n    }\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    arguments: []\r\n  , method: ''\r\n\r\n  , at: function(pos){\r\n\r\n      var params = []\r\n\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        params.push(this[this.arguments[i]])\r\n      }\r\n\r\n      var m = this._undo || new SVG.Matrix()\r\n\r\n      m = new SVG.Matrix().morph(SVG.Matrix.prototype[this.method].apply(m, params)).at(pos)\r\n\r\n      return this.inversed ? m.inverse() : m\r\n\r\n    }\r\n\r\n  , undo: function(o){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        o[this.arguments[i]] = typeof this[this.arguments[i]] == 'undefined' ? 0 : o[this.arguments[i]]\r\n      }\r\n\r\n      // The method SVG.Matrix.extract which was used before calling this\r\n      // method to obtain a value for the parameter o doesn't return a cx and\r\n      // a cy so we use the ones that were provided to this object at its creation\r\n      o.cx = this.cx\r\n      o.cy = this.cy\r\n\r\n      this._undo = new SVG[capitalize(this.method)](o, true).at(1)\r\n\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.Translate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['transformedX', 'transformedY']\r\n  , method: 'translate'\r\n  }\r\n\r\n})\r\n\r\nSVG.Rotate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['rotation', 'cx', 'cy']\r\n  , method: 'rotate'\r\n  , at: function(pos){\r\n      var m = new SVG.Matrix().rotate(new SVG.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(pos), this.cx, this.cy)\r\n      return this.inversed ? m.inverse() : m\r\n    }\r\n  , undo: function(o){\r\n      this._undo = o\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Scale = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['scaleX', 'scaleY', 'cx', 'cy']\r\n  , method: 'scale'\r\n  }\r\n\r\n})\r\n\r\nSVG.Skew = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['skewX', 'skewY', 'cx', 'cy']\r\n  , method: 'skew'\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Dynamic style generator\r\n  style: function(s, v) {\r\n    if (arguments.length == 0) {\r\n      // get full style\r\n      return this.node.style.cssText || ''\r\n\r\n    } else if (arguments.length < 2) {\r\n      // apply every style individually if an object is passed\r\n      if (typeof s == 'object') {\r\n        for (v in s) this.style(v, s[v])\r\n\r\n      } else if (SVG.regex.isCss.test(s)) {\r\n        // parse css string\r\n        s = s.split(/\\s*;\\s*/)\r\n          // filter out suffix ; and stuff like ;;\r\n          .filter(function(e) { return !!e })\r\n          .map(function(e){ return e.split(/\\s*:\\s*/) })\r\n\r\n        // apply every definition individually\r\n        while (v = s.pop()) {\r\n          this.style(v[0], v[1])\r\n        }\r\n      } else {\r\n        // act as a getter if the first and only argument is not an object\r\n        return this.node.style[camelCase(s)]\r\n      }\r\n\r\n    } else {\r\n      this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.Parent = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Returns all child elements\r\n    children: function() {\r\n      return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\r\n        return SVG.adopt(node)\r\n      })\r\n    }\r\n    // Add given element at a position\r\n  , add: function(element, i) {\r\n      if (i == null)\r\n        this.node.appendChild(element.node)\r\n      else if (element.node != this.node.childNodes[i])\r\n        this.node.insertBefore(element.node, this.node.childNodes[i])\r\n\r\n      return this\r\n    }\r\n    // Basically does the same as `add()` but returns the added element instead\r\n  , put: function(element, i) {\r\n      this.add(element, i)\r\n      return element\r\n    }\r\n    // Checks if the given element is a child\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // Gets index of given element\r\n  , index: function(element) {\r\n      return [].slice.call(this.node.childNodes).indexOf(element.node)\r\n    }\r\n    // Get a element at the given index\r\n  , get: function(i) {\r\n      return SVG.adopt(this.node.childNodes[i])\r\n    }\r\n    // Get first child\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get the last child\r\n  , last: function() {\r\n      return this.get(this.node.childNodes.length - 1)\r\n    }\r\n    // Iterates over all children and invokes a given block\r\n  , each: function(block, deep) {\r\n      var i, il\r\n        , children = this.children()\r\n\r\n      for (i = 0, il = children.length; i < il; i++) {\r\n        if (children[i] instanceof SVG.Element)\r\n          block.apply(children[i], [i, children])\r\n\r\n        if (deep && (children[i] instanceof SVG.Container))\r\n          children[i].each(block, deep)\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove a given child\r\n  , removeElement: function(element) {\r\n      this.node.removeChild(element.node)\r\n\r\n      return this\r\n    }\r\n    // Remove all elements in this container\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      return this\r\n    }\r\n  , // Get defs\r\n    defs: function() {\r\n      return this.doc().defs()\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Parent, {\r\n\r\n  ungroup: function(parent, depth) {\r\n    if(depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this\r\n\r\n    parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent))\r\n    depth = depth || Infinity\r\n\r\n    this.each(function(){\r\n      if(this instanceof SVG.Defs) return this\r\n      if(this instanceof SVG.Parent) return this.ungroup(parent, depth-1)\r\n      return this.toParent(parent)\r\n    })\r\n\r\n    this.node.firstChild || this.remove()\r\n\r\n    return this\r\n  },\r\n\r\n  flatten: function(parent, depth) {\r\n    return this.ungroup(parent, depth)\r\n  }\r\n\r\n})\nSVG.Container = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n})\n\r\nSVG.ViewBox = SVG.invent({\r\n\r\n  create: function(source) {\r\n    var i, base = [0, 0, 0, 0]\r\n\r\n    var x, y, width, height, box, view, we, he\r\n      , wm   = 1 // width multiplier\r\n      , hm   = 1 // height multiplier\r\n      , reg  = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi\r\n\r\n    if(source instanceof SVG.Element){\r\n\r\n      we = source\r\n      he = source\r\n      view = (source.attr('viewBox') || '').match(reg)\r\n      box = source.bbox\r\n\r\n      // get dimensions of current node\r\n      width  = new SVG.Number(source.width())\r\n      height = new SVG.Number(source.height())\r\n\r\n      // find nearest non-percentual dimensions\r\n      while (width.unit == '%') {\r\n        wm *= width.value\r\n        width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width())\r\n        we = we.parent()\r\n      }\r\n      while (height.unit == '%') {\r\n        hm *= height.value\r\n        height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height())\r\n        he = he.parent()\r\n      }\r\n\r\n      // ensure defaults\r\n      this.x      = 0\r\n      this.y      = 0\r\n      this.width  = width  * wm\r\n      this.height = height * hm\r\n      this.zoom   = 1\r\n\r\n      if (view) {\r\n        // get width and height from viewbox\r\n        x      = parseFloat(view[0])\r\n        y      = parseFloat(view[1])\r\n        width  = parseFloat(view[2])\r\n        height = parseFloat(view[3])\r\n\r\n        // calculate zoom accoring to viewbox\r\n        this.zoom = ((this.width / this.height) > (width / height)) ?\r\n          this.height / height :\r\n          this.width  / width\r\n\r\n        // calculate real pixel dimensions on parent SVG.Doc element\r\n        this.x      = x\r\n        this.y      = y\r\n        this.width  = width\r\n        this.height = height\r\n\r\n      }\r\n\r\n    }else{\r\n\r\n      // ensure source as object\r\n      source = typeof source === 'string' ?\r\n        source.match(reg).map(function(el){ return parseFloat(el) }) :\r\n      Array.isArray(source) ?\r\n        source :\r\n      typeof source == 'object' ?\r\n        [source.x, source.y, source.width, source.height] :\r\n      arguments.length == 4 ?\r\n        [].slice.call(arguments) :\r\n        base\r\n\r\n      this.x = source[0]\r\n      this.y = source[1]\r\n      this.width = source[2]\r\n      this.height = source[3]\r\n    }\r\n\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    toString: function() {\r\n      return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\r\n    }\r\n  , morph: function(x, y, width, height){\r\n      this.destination = new SVG.ViewBox(x, y, width, height)\r\n      return this\r\n    }\r\n\r\n  , at: function(pos) {\r\n\r\n      if(!this.destination) return this\r\n\r\n      return new SVG.ViewBox([\r\n          this.x + (this.destination.x - this.x) * pos\r\n        , this.y + (this.destination.y - this.y) * pos\r\n        , this.width + (this.destination.width - this.width) * pos\r\n        , this.height + (this.destination.height - this.height) * pos\r\n      ])\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n\r\n    // get/set viewbox\r\n    viewbox: function(x, y, width, height) {\r\n      if (arguments.length == 0)\r\n        // act as a getter if there are no arguments\r\n        return new SVG.ViewBox(this)\r\n\r\n      // otherwise act as a setter\r\n      return this.attr('viewBox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n  }\r\n\r\n})\n// Add events to elements\r\n\r\n;[ 'click',\r\n  'dblclick',\r\n  'mousedown',\r\n  'mouseup',\r\n  'mouseover',\r\n  'mouseout',\r\n  'mousemove',\r\n  'mouseenter',\r\n  'mouseleave',\r\n  'touchstart',\r\n  'touchmove',\r\n  'touchleave',\r\n  'touchend',\r\n  'touchcancel' ].forEach(function (event) {\r\n    // add event to SVG.Element\r\n    SVG.Element.prototype[event] = function (f) {\r\n      // bind event to element rather than element node\r\n      if (f == null) {\r\n        SVG.off(this, event)\r\n      } else {\r\n        SVG.on(this, event, f)\r\n      }\r\n      return this\r\n    }\r\n  })\r\n\r\nSVG.listenerId = 0\r\n\r\n// Add event binder in the SVG namespace\r\nSVG.on = function (node, events, listener, binding, options) {\r\n  var l = listener.bind(binding || node)\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n\r\n  // ensure instance object for nodes which are not adopted\r\n  n.instance = n.instance || {_events: {}}\r\n\r\n  var bag = n.instance._events\r\n\r\n  // add id to listener\r\n  if (!listener._svgjsListenerId) { listener._svgjsListenerId = ++SVG.listenerId }\r\n\r\n  events.split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event.split('.')[0]\r\n    var ns = event.split('.')[1] || '*'\r\n\r\n    // ensure valid object\r\n    bag[ev] = bag[ev] || {}\r\n    bag[ev][ns] = bag[ev][ns] || {}\r\n\r\n    // reference listener\r\n    bag[ev][ns][listener._svgjsListenerId] = l\r\n\r\n    // add listener\r\n    n.addEventListener(ev, l, options || false)\r\n  })\r\n}\r\n\r\n// Add event unbinder in the SVG namespace\r\nSVG.off = function (node, events, listener, options) {\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n  if (!n.instance) return\r\n\r\n  // listener can be a function or a number\r\n  if (typeof listener === 'function') {\r\n    listener = listener._svgjsListenerId\r\n    if (!listener) return\r\n  }\r\n\r\n  var bag = n.instance._events\r\n\r\n  ;(events || '').split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event && event.split('.')[0]\r\n    var ns = event && event.split('.')[1]\r\n    var namespace, l\r\n\r\n    if (listener) {\r\n      // remove listener reference\r\n      if (bag[ev] && bag[ev][ns || '*']) {\r\n        // removeListener\r\n        n.removeEventListener(ev, bag[ev][ns || '*'][listener], options || false)\r\n\r\n        delete bag[ev][ns || '*'][listener]\r\n      }\r\n    } else if (ev && ns) {\r\n      // remove all listeners for a namespaced event\r\n      if (bag[ev] && bag[ev][ns]) {\r\n        for (l in bag[ev][ns]) { SVG.off(n, [ev, ns].join('.'), l) }\r\n\r\n        delete bag[ev][ns]\r\n      }\r\n    } else if (ns) {\r\n      // remove all listeners for a specific namespace\r\n      for (event in bag) {\r\n        for (namespace in bag[event]) {\r\n          if (ns === namespace) { SVG.off(n, [event, ns].join('.')) }\r\n        }\r\n      }\r\n    } else if (ev) {\r\n      // remove all listeners for the event\r\n      if (bag[ev]) {\r\n        for (namespace in bag[ev]) { SVG.off(n, [ev, namespace].join('.')) }\r\n\r\n        delete bag[ev]\r\n      }\r\n    } else {\r\n      // remove all listeners on a given node\r\n      for (event in bag) { SVG.off(n, event) }\r\n\r\n      n.instance._events = {}\r\n    }\r\n  })\r\n}\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Bind given event to listener\r\n  on: function (event, listener, binding, options) {\r\n    SVG.on(this, event, listener, binding, options)\r\n    return this\r\n  },\r\n  // Unbind event from listener\r\n  off: function (event, listener) {\r\n    SVG.off(this.node, event, listener)\r\n    return this\r\n  },\r\n  fire: function (event, data) {\r\n    // Dispatch event\r\n    if (event instanceof window.Event) {\r\n      this.node.dispatchEvent(event)\r\n    } else {\r\n      this.node.dispatchEvent(event = new SVG.CustomEvent(event, {detail: data, cancelable: true}))\r\n    }\r\n    this._event = event\r\n    return this\r\n  },\r\n  event: function() {\r\n    return this._event\r\n  }\r\n})\r\n\n\r\nSVG.Defs = SVG.invent({\r\n  // Initialize node\r\n  create: 'defs'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n})\nSVG.G = SVG.invent({\r\n  // Initialize node\r\n  create: 'g'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.transform('x') : this.transform({ x: x - this.x() }, true)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.transform('y') : this.transform({ y: y - this.y() }, true)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.gbox().cx : this.x(x - this.gbox().width / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.gbox().cy : this.y(y - this.gbox().height / 2)\r\n    }\r\n  , gbox: function() {\r\n\r\n      var bbox  = this.bbox()\r\n        , trans = this.transform()\r\n\r\n      bbox.x  += trans.x\r\n      bbox.x2 += trans.x\r\n      bbox.cx += trans.x\r\n\r\n      bbox.y  += trans.y\r\n      bbox.y2 += trans.y\r\n      bbox.cy += trans.y\r\n\r\n      return bbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a group element\r\n    group: function() {\r\n      return this.put(new SVG.G)\r\n    }\r\n  }\r\n})\r\n\nSVG.Doc = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    if (element) {\r\n      // ensure the presence of a dom element\r\n      element = typeof element == 'string' ?\r\n        document.getElementById(element) :\r\n        element\r\n\r\n      // If the target is an svg element, use that element as the main wrapper.\r\n      // This allows svg.js to work with svg documents as well.\r\n      if (element.nodeName == 'svg') {\r\n        this.constructor.call(this, element)\r\n      } else {\r\n        this.constructor.call(this, SVG.create('svg'))\r\n        element.appendChild(this.node)\r\n        this.size('100%', '100%')\r\n      }\r\n\r\n      // set svg element attributes and ensure defs node\r\n      this.namespace().defs()\r\n    }\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add namespaces\r\n    namespace: function() {\r\n      return this\r\n        .attr({ xmlns: SVG.ns, version: '1.1' })\r\n        .attr('xmlns:xlink', SVG.xlink, SVG.xmlns)\r\n        .attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns)\r\n    }\r\n    // Creates and returns defs element\r\n  , defs: function() {\r\n      if (!this._defs) {\r\n        var defs\r\n\r\n        // Find or create a defs element in this instance\r\n        if (defs = this.node.getElementsByTagName('defs')[0])\r\n          this._defs = SVG.adopt(defs)\r\n        else\r\n          this._defs = new SVG.Defs\r\n\r\n        // Make sure the defs node is at the end of the stack\r\n        this.node.appendChild(this._defs.node)\r\n      }\r\n\r\n      return this._defs\r\n    }\r\n    // custom parent method\r\n  , parent: function() {\r\n      if(!this.node.parentNode || this.node.parentNode.nodeName == '#document' || this.node.parentNode.nodeName == '#document-fragment') return null\r\n      return this.node.parentNode\r\n    }\r\n    // Fix for possible sub-pixel offset. See:\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\r\n  , spof: function() {\r\n      var pos = this.node.getScreenCTM()\r\n\r\n      if (pos)\r\n        this\r\n          .style('left', (-pos.e % 1) + 'px')\r\n          .style('top',  (-pos.f % 1) + 'px')\r\n\r\n      return this\r\n    }\r\n\r\n      // Removes the doc from the DOM\r\n  , remove: function() {\r\n      if(this.parent()) {\r\n        this.parent().removeChild(this.node)\r\n      }\r\n\r\n      return this\r\n    }\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      // add back parser\r\n      if(!SVG.parser.draw.parentNode)\r\n        this.node.appendChild(SVG.parser.draw)\r\n\r\n      return this\r\n    }\r\n  , clone: function (parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // get reference to node\r\n      var node = this.node\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) {\r\n        (parent.node || parent).appendChild(clone.node)\r\n      } else {\r\n        node.parentNode.insertBefore(clone.node, node.nextSibling)\r\n      }\r\n\r\n      return clone\r\n    }\r\n  }\r\n\r\n})\r\n\n// ### This module adds backward / forward functionality to elements.\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Get all siblings, including myself\r\n  siblings: function() {\r\n    return this.parent().children()\r\n  }\r\n  // Get the curent position siblings\r\n, position: function() {\r\n    return this.parent().index(this)\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, next: function() {\r\n    return this.siblings()[this.position() + 1]\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, previous: function() {\r\n    return this.siblings()[this.position() - 1]\r\n  }\r\n  // Send given element one step forward\r\n, forward: function() {\r\n    var i = this.position() + 1\r\n      , p = this.parent()\r\n\r\n    // move node one step forward\r\n    p.removeElement(this).add(this, i)\r\n\r\n    // make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element one step backward\r\n, backward: function() {\r\n    var i = this.position()\r\n\r\n    if (i > 0)\r\n      this.parent().removeElement(this).add(this, i - 1)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the front\r\n, front: function() {\r\n    var p = this.parent()\r\n\r\n    // Move node forward\r\n    p.node.appendChild(this.node)\r\n\r\n    // Make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the back\r\n, back: function() {\r\n    if (this.position() > 0)\r\n      this.parent().removeElement(this).add(this, 0)\r\n\r\n    return this\r\n  }\r\n  // Inserts a given element before the targeted element\r\n, before: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i)\r\n\r\n    return this\r\n  }\r\n  // Insters a given element after the targeted element\r\n, after: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i + 1)\r\n\r\n    return this\r\n  }\r\n\r\n})\nSVG.Mask = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('mask'))\r\n\r\n    // keep references to masked elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unmask all masked elements and remove itself\r\n    remove: function() {\r\n      // unmask all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unmask()\r\n      this.targets = []\r\n\r\n      // remove mask from parent\r\n      SVG.Element.prototype.remove.call(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create masking element\r\n    mask: function() {\r\n      return this.defs().put(new SVG.Mask)\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Distribute mask to svg element\r\n  maskWith: function(element) {\r\n    // use given mask or create a new one\r\n    this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.masker.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")')\r\n  }\r\n  // Unmask element\r\n, unmask: function() {\r\n    delete this.masker\r\n    return this.attr('mask', null)\r\n  }\r\n\r\n})\r\n\nSVG.ClipPath = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('clipPath'))\r\n\r\n    // keep references to clipped elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unclip all clipped elements and remove itself\r\n    remove: function() {\r\n      // unclip all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unclip()\r\n      this.targets = []\r\n\r\n      // remove clipPath from parent\r\n      this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create clipping element\r\n    clip: function() {\r\n      return this.defs().put(new SVG.ClipPath)\r\n    }\r\n  }\r\n})\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Distribute clipPath to svg element\r\n  clipWith: function(element) {\r\n    // use given clip or create a new one\r\n    this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.clipper.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")')\r\n  }\r\n  // Unclip element\r\n, unclip: function() {\r\n    delete this.clipper\r\n    return this.attr('clip-path', null)\r\n  }\r\n\r\n})\nSVG.Gradient = SVG.invent({\r\n  // Initialize node\r\n  create: function(type) {\r\n    this.constructor.call(this, SVG.create(type + 'Gradient'))\r\n\r\n    // store type\r\n    this.type = type\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add a color stop\r\n    at: function(offset, color, opacity) {\r\n      return this.put(new SVG.Stop).update(offset, color, opacity)\r\n    }\r\n    // Update gradient\r\n  , update: function(block) {\r\n      // remove all stops\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'gradientTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create gradient element in defs\r\n    gradient: function(type, block) {\r\n      return this.defs().gradient(type, block)\r\n    }\r\n  }\r\n})\r\n\r\n// Add animatable methods to both gradient and fx module\r\nSVG.extend(SVG.Gradient, SVG.FX, {\r\n  // From position\r\n  from: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ fx: new SVG.Number(x), fy: new SVG.Number(y) }) :\r\n      this.attr({ x1: new SVG.Number(x), y1: new SVG.Number(y) })\r\n  }\r\n  // To position\r\n, to: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ cx: new SVG.Number(x), cy: new SVG.Number(y) }) :\r\n      this.attr({ x2: new SVG.Number(x), y2: new SVG.Number(y) })\r\n  }\r\n})\r\n\r\n// Base gradient generation\r\nSVG.extend(SVG.Defs, {\r\n  // define gradient\r\n  gradient: function(type, block) {\r\n    return this.put(new SVG.Gradient(type)).update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.Stop = SVG.invent({\r\n  // Initialize node\r\n  create: 'stop'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // add color stops\r\n    update: function(o) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        o = {\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        }\r\n      }\r\n\r\n      // set attributes\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.Pattern = SVG.invent({\r\n  // Initialize node\r\n  create: 'pattern'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Return the fill id\r\n    fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Update pattern by rebuilding\r\n  , update: function(block) {\r\n      // remove content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'patternTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create pattern element in defs\r\n    pattern: function(width, height, block) {\r\n      return this.defs().pattern(width, height, block)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Define gradient\r\n  pattern: function(width, height, block) {\r\n    return this.put(new SVG.Pattern).update(block).attr({\r\n      x:            0\r\n    , y:            0\r\n    , width:        width\r\n    , height:       height\r\n    , patternUnits: 'userSpaceOnUse'\r\n    })\r\n  }\r\n\r\n})\nSVG.Shape = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n})\n\r\nSVG.Bare = SVG.invent({\r\n  // Initialize\r\n  create: function(element, inherit) {\r\n    // construct element\r\n    this.constructor.call(this, SVG.create(element))\r\n\r\n    // inherit custom methods\r\n    if (inherit)\r\n      for (var method in inherit.prototype)\r\n        if (typeof inherit.prototype[method] === 'function')\r\n          this[method] = inherit.prototype[method]\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Insert some plain text\r\n    words: function(text) {\r\n      // remove contents\r\n      while (this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // create text node\r\n      this.node.appendChild(document.createTextNode(text))\r\n\r\n      return this\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Create an element that is not described by SVG.js\r\n  element: function(element, inherit) {\r\n    return this.put(new SVG.Bare(element, inherit))\r\n  }\r\n})\r\n\nSVG.Symbol = SVG.invent({\r\n  // Initialize node\r\n  create: 'symbol'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n, construct: {\r\n    // create symbol\r\n    symbol: function() {\r\n      return this.put(new SVG.Symbol)\r\n    }\r\n  }\r\n})\r\n\nSVG.Use = SVG.invent({\r\n  // Initialize node\r\n  create: 'use'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Use element as a reference\r\n    element: function(element, file) {\r\n      // Set lined element\r\n      return this.attr('href', (file || '') + '#' + element, SVG.xlink)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a use element\r\n    use: function(element, file) {\r\n      return this.put(new SVG.Use).element(element, file)\r\n    }\r\n  }\r\n})\nSVG.Rect = SVG.invent({\r\n  // Initialize node\r\n  create: 'rect'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a rect element\r\n    rect: function(width, height) {\r\n      return this.put(new SVG.Rect()).size(width, height)\r\n    }\r\n  }\r\n})\nSVG.Circle = SVG.invent({\r\n  // Initialize node\r\n  create: 'circle'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create circle element, based on ellipse\r\n    circle: function(size) {\r\n      return this.put(new SVG.Circle).rx(new SVG.Number(size).divide(2)).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Circle, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('r', rx)\r\n  }\r\n  // Alias radius x value\r\n, ry: function(ry) {\r\n    return this.rx(ry)\r\n  }\r\n})\r\n\r\nSVG.Ellipse = SVG.invent({\r\n  // Initialize node\r\n  create: 'ellipse'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create an ellipse\r\n    ellipse: function(width, height) {\r\n      return this.put(new SVG.Ellipse).size(width, height).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('rx', rx)\r\n  }\r\n  // Radius y value\r\n, ry: function(ry) {\r\n    return this.attr('ry', ry)\r\n  }\r\n})\r\n\r\n// Add common method\r\nSVG.extend(SVG.Circle, SVG.Ellipse, {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.attr('cx') : this.attr('cx', x)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.attr('cy') : this.attr('cy', y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.rx() * 2 : this.rx(new SVG.Number(width).divide(2))\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.ry() * 2 : this.ry(new SVG.Number(height).divide(2))\r\n    }\r\n    // Custom size function\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .rx(new SVG.Number(p.width).divide(2))\r\n        .ry(new SVG.Number(p.height).divide(2))\r\n    }\r\n})\nSVG.Line = SVG.invent({\r\n  // Initialize node\r\n  create: 'line'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Get array\r\n    array: function() {\r\n      return new SVG.PointArray([\r\n        [ this.attr('x1'), this.attr('y1') ]\r\n      , [ this.attr('x2'), this.attr('y2') ]\r\n      ])\r\n    }\r\n    // Overwrite native plot() method\r\n  , plot: function(x1, y1, x2, y2) {\r\n      if (x1 == null)\r\n        return this.array()\r\n      else if (typeof y1 !== 'undefined')\r\n        x1 = { x1: x1, y1: y1, x2: x2, y2: y2 }\r\n      else\r\n        x1 = new SVG.PointArray(x1).toLine()\r\n\r\n      return this.attr(x1)\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr(this.array().move(x, y).toLine())\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr(this.array().size(p.width, p.height).toLine())\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a line element\r\n    line: function(x1, y1, x2, y2) {\r\n      // make sure plot is called as a setter\r\n      // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\r\n      return SVG.Line.prototype.plot.apply(\r\n        this.put(new SVG.Line)\r\n      , x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]\r\n      )\r\n    }\r\n  }\r\n})\r\n\nSVG.Polyline = SVG.invent({\r\n  // Initialize node\r\n  create: 'polyline'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polyline element\r\n    polyline: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polyline).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.Polygon = SVG.invent({\r\n  // Initialize node\r\n  create: 'polygon'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polygon element\r\n    polygon: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polygon).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\n// Add polygon-specific functions\r\nSVG.extend(SVG.Polyline, SVG.Polygon, {\r\n  // Get array\r\n  array: function() {\r\n    return this._array || (this._array = new SVG.PointArray(this.attr('points')))\r\n  }\r\n  // Plot new path\r\n, plot: function(p) {\r\n    return (p == null) ?\r\n      this.array() :\r\n      this.clear().attr('points', typeof p == 'string' ? p : (this._array = new SVG.PointArray(p)))\r\n  }\r\n  // Clear array cache\r\n, clear: function() {\r\n    delete this._array\r\n    return this\r\n  }\r\n  // Move by left top corner\r\n, move: function(x, y) {\r\n    return this.attr('points', this.array().move(x, y))\r\n  }\r\n  // Set element size to given width and height\r\n, size: function(width, height) {\r\n    var p = proportionalSize(this, width, height)\r\n\r\n    return this.attr('points', this.array().size(p.width, p.height))\r\n  }\r\n\r\n})\r\n\n// unify all point to point elements\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\r\n  // Define morphable array\r\n  morphArray:  SVG.PointArray\r\n  // Move by left top corner over x-axis\r\n, x: function(x) {\r\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n  }\r\n  // Move by left top corner over y-axis\r\n, y: function(y) {\r\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n  }\r\n  // Set width of element\r\n, width: function(width) {\r\n    var b = this.bbox()\r\n\r\n    return width == null ? b.width : this.size(width, b.height)\r\n  }\r\n  // Set height of element\r\n, height: function(height) {\r\n    var b = this.bbox()\r\n\r\n    return height == null ? b.height : this.size(b.width, height)\r\n  }\r\n})\nSVG.Path = SVG.invent({\r\n  // Initialize node\r\n  create: 'path'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Define morphable array\r\n    morphArray:  SVG.PathArray\r\n    // Get array\r\n  , array: function() {\r\n      return this._array || (this._array = new SVG.PathArray(this.attr('d')))\r\n    }\r\n    // Plot new path\r\n  , plot: function(d) {\r\n      return (d == null) ?\r\n        this.array() :\r\n        this.clear().attr('d', typeof d == 'string' ? d : (this._array = new SVG.PathArray(d)))\r\n    }\r\n    // Clear array cache\r\n  , clear: function() {\r\n      delete this._array\r\n      return this\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr('d', this.array().move(x, y))\r\n    }\r\n    // Move by left top corner over x-axis\r\n  , x: function(x) {\r\n      return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n    }\r\n    // Move by left top corner over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr('d', this.array().size(p.width, p.height))\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.bbox().width : this.size(width, this.bbox().height)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.bbox().height : this.size(this.bbox().width, height)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped path element\r\n    path: function(d) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Path).plot(d || new SVG.PathArray)\r\n    }\r\n  }\r\n})\r\n\nSVG.Image = SVG.invent({\r\n  // Initialize node\r\n  create: 'image'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // (re)load image\r\n    load: function(url) {\r\n      if (!url) return this\r\n\r\n      var self = this\r\n        , img  = new window.Image()\r\n\r\n      // preload image\r\n      SVG.on(img, 'load', function() {\r\n        SVG.off(img)\r\n\r\n        var p = self.parent(SVG.Pattern)\r\n\r\n        if(p === null) return\r\n\r\n        // ensure image size\r\n        if (self.width() == 0 && self.height() == 0)\r\n          self.size(img.width, img.height)\r\n\r\n        // ensure pattern size if not set\r\n        if (p && p.width() == 0 && p.height() == 0)\r\n          p.size(self.width(), self.height())\r\n\r\n        // callback\r\n        if (typeof self._loaded === 'function')\r\n          self._loaded.call(self, {\r\n            width:  img.width\r\n          , height: img.height\r\n          , ratio:  img.width / img.height\r\n          , url:    url\r\n          })\r\n      })\r\n\r\n      SVG.on(img, 'error', function(e){\r\n        SVG.off(img)\r\n\r\n        if (typeof self._error === 'function'){\r\n            self._error.call(self, e)\r\n        }\r\n      })\r\n\r\n      return this.attr('href', (img.src = this.src = url), SVG.xlink)\r\n    }\r\n    // Add loaded callback\r\n  , loaded: function(loaded) {\r\n      this._loaded = loaded\r\n      return this\r\n    }\r\n\r\n  , error: function(error) {\r\n      this._error = error\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // create image element, load image and set its size\r\n    image: function(source, width, height) {\r\n      return this.put(new SVG.Image).load(source).size(width || 0, height || width || 0)\r\n    }\r\n  }\r\n\r\n})\nSVG.Text = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('text'))\r\n\r\n    this.dom.leading = new SVG.Number(1.3)    // store leading value for rebuilding\r\n    this._rebuild = true                      // enable automatic updating of dy values\r\n    this._build   = false                     // disable build mode for adding multiple lines\r\n\r\n    // set default font\r\n    this.attr('font-family', SVG.defaults.attrs['font-family'])\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      // act as getter\r\n      if (x == null)\r\n        return this.attr('x')\r\n\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      var oy = this.attr('y')\r\n        , o  = typeof oy === 'number' ? oy - this.bbox().y : 0\r\n\r\n      // act as getter\r\n      if (y == null)\r\n        return typeof oy === 'number' ? oy - o : oy\r\n\r\n      return this.attr('y', typeof y.valueOf() === 'number' ? y + o : y)\r\n    }\r\n    // Move center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2)\r\n    }\r\n    // Move center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2)\r\n    }\r\n    // Set the text content\r\n  , text: function(text) {\r\n      // act as getter\r\n      if (typeof text === 'undefined'){\r\n        var text = ''\r\n        var children = this.node.childNodes\r\n        for(var i = 0, len = children.length; i < len; ++i){\r\n\r\n          // add newline if its not the first child and newLined is set to true\r\n          if(i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true){\r\n            text += '\\n'\r\n          }\r\n\r\n          // add content of this node\r\n          text += children[i].textContent\r\n        }\r\n\r\n        return text\r\n      }\r\n\r\n      // remove existing content\r\n      this.clear().build(true)\r\n\r\n      if (typeof text === 'function') {\r\n        // call block\r\n        text.call(this, this)\r\n\r\n      } else {\r\n        // store text and make sure text is not blank\r\n        text = text.split('\\n')\r\n\r\n        // build new lines\r\n        for (var i = 0, il = text.length; i < il; i++)\r\n          this.tspan(text[i]).newLine()\r\n      }\r\n\r\n      // disable build mode and rebuild lines\r\n      return this.build(false).rebuild()\r\n    }\r\n    // Set font size\r\n  , size: function(size) {\r\n      return this.attr('font-size', size).rebuild()\r\n    }\r\n    // Set / get leading\r\n  , leading: function(value) {\r\n      // act as getter\r\n      if (value == null)\r\n        return this.dom.leading\r\n\r\n      // act as setter\r\n      this.dom.leading = new SVG.Number(value)\r\n\r\n      return this.rebuild()\r\n    }\r\n    // Get all the first level lines\r\n  , lines: function() {\r\n      var node = (this.textPath && this.textPath() || this).node\r\n\r\n      // filter tspans and map them to SVG.js instances\r\n      var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function(el){\r\n        return SVG.adopt(el)\r\n      })\r\n\r\n      // return an instance of SVG.set\r\n      return new SVG.Set(lines)\r\n    }\r\n    // Rebuild appearance type\r\n  , rebuild: function(rebuild) {\r\n      // store new rebuild flag if given\r\n      if (typeof rebuild == 'boolean')\r\n        this._rebuild = rebuild\r\n\r\n      // define position of all lines\r\n      if (this._rebuild) {\r\n        var self = this\r\n          , blankLineOffset = 0\r\n          , dy = this.dom.leading * new SVG.Number(this.attr('font-size'))\r\n\r\n        this.lines().each(function() {\r\n          if (this.dom.newLined) {\r\n            if (!self.textPath())\r\n              this.attr('x', self.attr('x'))\r\n            if(this.text() == '\\n') {\r\n              blankLineOffset += dy\r\n            }else{\r\n              this.attr('dy', dy + blankLineOffset)\r\n              blankLineOffset = 0\r\n            }\r\n          }\r\n        })\r\n\r\n        this.fire('rebuild')\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Enable / disable build mode\r\n  , build: function(build) {\r\n      this._build = !!build\r\n      return this\r\n    }\r\n    // overwrite method from parent to set data properly\r\n  , setData: function(o){\r\n      this.dom = o\r\n      this.dom.leading = new SVG.Number(o.leading || 1.3)\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create text element\r\n    text: function(text) {\r\n      return this.put(new SVG.Text).text(text)\r\n    }\r\n    // Create plain text element\r\n  , plain: function(text) {\r\n      return this.put(new SVG.Text).plain(text)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Tspan = SVG.invent({\r\n  // Initialize node\r\n  create: 'tspan'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set text content\r\n    text: function(text) {\r\n      if(text == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '')\r\n\r\n      typeof text === 'function' ? text.call(this, this) : this.plain(text)\r\n\r\n      return this\r\n    }\r\n    // Shortcut dx\r\n  , dx: function(dx) {\r\n      return this.attr('dx', dx)\r\n    }\r\n    // Shortcut dy\r\n  , dy: function(dy) {\r\n      return this.attr('dy', dy)\r\n    }\r\n    // Create new line\r\n  , newLine: function() {\r\n      // fetch text parent\r\n      var t = this.parent(SVG.Text)\r\n\r\n      // mark new line\r\n      this.dom.newLined = true\r\n\r\n      // apply new hy¡n\r\n      return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x())\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Text, SVG.Tspan, {\r\n  // Create plain text node\r\n  plain: function(text) {\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // create text node\r\n    this.node.appendChild(document.createTextNode(text))\r\n\r\n    return this\r\n  }\r\n  // Create a tspan\r\n, tspan: function(text) {\r\n    var node  = (this.textPath && this.textPath() || this).node\r\n      , tspan = new SVG.Tspan\r\n\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // add new tspan\r\n    node.appendChild(tspan.node)\r\n\r\n    return tspan.text(text)\r\n  }\r\n  // Clear all lines\r\n, clear: function() {\r\n    var node = (this.textPath && this.textPath() || this).node\r\n\r\n    // remove existing child nodes\r\n    while (node.hasChildNodes())\r\n      node.removeChild(node.lastChild)\r\n\r\n    return this\r\n  }\r\n  // Get length of text element\r\n, length: function() {\r\n    return this.node.getComputedTextLength()\r\n  }\r\n})\r\n\nSVG.TextPath = SVG.invent({\r\n  // Initialize node\r\n  create: 'textPath'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n  // Define parent class\r\n, parent: SVG.Text\r\n\r\n  // Add parent method\r\n, construct: {\r\n    morphArray: SVG.PathArray\r\n    // Create path for text to run on\r\n  , path: function(d) {\r\n      // create textPath element\r\n      var path  = new SVG.TextPath\r\n        , track = this.doc().defs().path(d)\r\n\r\n      // move lines to textpath\r\n      while (this.node.hasChildNodes())\r\n        path.node.appendChild(this.node.firstChild)\r\n\r\n      // add textPath element as child node\r\n      this.node.appendChild(path.node)\r\n\r\n      // link textPath to path and add content\r\n      path.attr('href', '#' + track, SVG.xlink)\r\n\r\n      return this\r\n    }\r\n    // return the array of the path track element\r\n  , array: function() {\r\n      var track = this.track()\r\n\r\n      return track ? track.array() : null\r\n    }\r\n    // Plot path if any\r\n  , plot: function(d) {\r\n      var track = this.track()\r\n        , pathArray = null\r\n\r\n      if (track) {\r\n        pathArray = track.plot(d)\r\n      }\r\n\r\n      return (d == null) ? pathArray : this\r\n    }\r\n    // Get the path track element\r\n  , track: function() {\r\n      var path = this.textPath()\r\n\r\n      if (path)\r\n        return path.reference('href')\r\n    }\r\n    // Get the textPath child\r\n  , textPath: function() {\r\n      if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath')\r\n        return SVG.adopt(this.node.firstChild)\r\n    }\r\n  }\r\n})\r\n\nSVG.Nested = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('svg'))\r\n\r\n    this.style('overflow', 'visible')\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create nested svg document\r\n    nested: function() {\r\n      return this.put(new SVG.Nested)\r\n    }\r\n  }\r\n})\nSVG.A = SVG.invent({\r\n  // Initialize node\r\n  create: 'a'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Link url\r\n    to: function(url) {\r\n      return this.attr('href', url, SVG.xlink)\r\n    }\r\n    // Link show attribute\r\n  , show: function(target) {\r\n      return this.attr('show', target, SVG.xlink)\r\n    }\r\n    // Link target attribute\r\n  , target: function(target) {\r\n      return this.attr('target', target)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a hyperlink element\r\n    link: function(url) {\r\n      return this.put(new SVG.A).to(url)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Create a hyperlink element\r\n  linkTo: function(url) {\r\n    var link = new SVG.A\r\n\r\n    if (typeof url == 'function')\r\n      url.call(link, link)\r\n    else\r\n      link.to(url)\r\n\r\n    return this.parent().put(link).put(this)\r\n  }\r\n\r\n})\nSVG.Marker = SVG.invent({\r\n  // Initialize node\r\n  create: 'marker'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set width of element\r\n    width: function(width) {\r\n      return this.attr('markerWidth', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('markerHeight', height)\r\n    }\r\n    // Set marker refX and refY\r\n  , ref: function(x, y) {\r\n      return this.attr('refX', x).attr('refY', y)\r\n    }\r\n    // Update marker\r\n  , update: function(block) {\r\n      // remove all content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , toString: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    marker: function(width, height, block) {\r\n      // Create marker element in defs\r\n      return this.defs().marker(width, height, block)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Create marker\r\n  marker: function(width, height, block) {\r\n    // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\r\n    return this.put(new SVG.Marker)\r\n      .size(width, height)\r\n      .ref(width / 2, height / 2)\r\n      .viewbox(0, 0, width, height)\r\n      .attr('orient', 'auto')\r\n      .update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\r\n  // Create and attach markers\r\n  marker: function(marker, width, height, block) {\r\n    var attr = ['marker']\r\n\r\n    // Build attribute name\r\n    if (marker != 'all') attr.push(marker)\r\n    attr = attr.join('-')\r\n\r\n    // Set marker attribute\r\n    marker = arguments[1] instanceof SVG.Marker ?\r\n      arguments[1] :\r\n      this.doc().marker(width, height, block)\r\n\r\n    return this.attr(attr, marker)\r\n  }\r\n\r\n})\n// Define list of available attributes for stroke and fill\r\nvar sugar = {\r\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset']\r\n, fill:   ['color', 'opacity', 'rule']\r\n, prefix: function(t, a) {\r\n    return a == 'color' ? t : t + '-' + a\r\n  }\r\n}\r\n\r\n// Add sugar for fill and stroke\r\n;['fill', 'stroke'].forEach(function(m) {\r\n  var i, extension = {}\r\n\r\n  extension[m] = function(o) {\r\n    if (typeof o == 'undefined')\r\n      return this\r\n    if (typeof o == 'string' || SVG.Color.isRgb(o) || (o && typeof o.fill === 'function'))\r\n      this.attr(m, o)\r\n\r\n    else\r\n      // set all attributes from sugar.fill and sugar.stroke list\r\n      for (i = sugar[m].length - 1; i >= 0; i--)\r\n        if (o[sugar[m][i]] != null)\r\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\r\n\r\n    return this\r\n  }\r\n\r\n  SVG.extend(SVG.Element, SVG.FX, extension)\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, SVG.FX, {\r\n  // Map rotation to transform\r\n  rotate: function(d, cx, cy) {\r\n    return this.transform({ rotation: d, cx: cx, cy: cy })\r\n  }\r\n  // Map skew to transform\r\n, skew: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ skew: x, cx: y, cy: cx }) :\r\n      this.transform({ skewX: x, skewY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map scale to transform\r\n, scale: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ scale: x, cx: y, cy: cx }) :\r\n      this.transform({ scaleX: x, scaleY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map translate to transform\r\n, translate: function(x, y) {\r\n    return this.transform({ x: x, y: y })\r\n  }\r\n  // Map flip to transform\r\n, flip: function(a, o) {\r\n    o = typeof a == 'number' ? a : o\r\n    return this.transform({ flip: a || 'both', offset: o })\r\n  }\r\n  // Map matrix to transform\r\n, matrix: function(m) {\r\n    return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m))\r\n  }\r\n  // Opacity\r\n, opacity: function(value) {\r\n    return this.attr('opacity', value)\r\n  }\r\n  // Relative move over x axis\r\n, dx: function(x) {\r\n    return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true)\r\n  }\r\n  // Relative move over y axis\r\n, dy: function(y) {\r\n    return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true)\r\n  }\r\n  // Relative move over x and y axes\r\n, dmove: function(x, y) {\r\n    return this.dx(x).dy(y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\r\n  // Add x and y radius\r\n  radius: function(x, y) {\r\n    var type = (this._target || this).type;\r\n    return type == 'radial' || type == 'circle' ?\r\n      this.attr('r', new SVG.Number(x)) :\r\n      this.rx(x).ry(y == null ? x : y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Path, {\r\n  // Get path length\r\n  length: function() {\r\n    return this.node.getTotalLength()\r\n  }\r\n  // Get point at length\r\n, pointAt: function(length) {\r\n    return this.node.getPointAtLength(length)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Parent, SVG.Text, SVG.Tspan, SVG.FX, {\r\n  // Set font\r\n  font: function(a, v) {\r\n    if (typeof a == 'object') {\r\n      for (v in a) this.font(v, a[v])\r\n    }\r\n\r\n    return a == 'leading' ?\r\n        this.leading(v) :\r\n      a == 'anchor' ?\r\n        this.attr('text-anchor', v) :\r\n      a == 'size' || a == 'family' || a == 'weight' || a == 'stretch' || a == 'variant' || a == 'style' ?\r\n        this.attr('font-'+ a, v) :\r\n        this.attr(a, v)\r\n  }\r\n})\r\n\nSVG.Set = SVG.invent({\r\n  // Initialize\r\n  create: function(members) {\r\n    if (members instanceof SVG.Set) {\r\n      this.members = members.members.slice()\r\n    } else {\r\n      Array.isArray(members) ? this.members = members : this.clear()\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add element to set\r\n    add: function() {\r\n      var i, il, elements = [].slice.call(arguments)\r\n\r\n      for (i = 0, il = elements.length; i < il; i++)\r\n        this.members.push(elements[i])\r\n\r\n      return this\r\n    }\r\n    // Remove element from set\r\n  , remove: function(element) {\r\n      var i = this.index(element)\r\n\r\n      // remove given child\r\n      if (i > -1)\r\n        this.members.splice(i, 1)\r\n\r\n      return this\r\n    }\r\n    // Iterate over all members\r\n  , each: function(block) {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        block.apply(this.members[i], [i, this.members])\r\n\r\n      return this\r\n    }\r\n    // Restore to defaults\r\n  , clear: function() {\r\n      // initialize store\r\n      this.members = []\r\n\r\n      return this\r\n    }\r\n    // Get the length of a set\r\n  , length: function() {\r\n      return this.members.length\r\n    }\r\n    // Checks if a given element is present in set\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // retuns index of given element in set\r\n  , index: function(element) {\r\n      return this.members.indexOf(element)\r\n    }\r\n    // Get member at given index\r\n  , get: function(i) {\r\n      return this.members[i]\r\n    }\r\n    // Get first member\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get last member\r\n  , last: function() {\r\n      return this.get(this.members.length - 1)\r\n    }\r\n    // Default value\r\n  , valueOf: function() {\r\n      return this.members\r\n    }\r\n    // Get the bounding box of all members included or empty box if set has no items\r\n  , bbox: function(){\r\n      // return an empty box of there are no members\r\n      if (this.members.length == 0)\r\n        return new SVG.RBox()\r\n\r\n      // get the first rbox and update the target bbox\r\n      var rbox = this.members[0].rbox(this.members[0].doc())\r\n\r\n      this.each(function() {\r\n        // user rbox for correct position and visual representation\r\n        rbox = rbox.merge(this.rbox(this.doc()))\r\n      })\r\n\r\n      return rbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a new set\r\n    set: function(members) {\r\n      return new SVG.Set(members)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.FX.Set = SVG.invent({\r\n  // Initialize node\r\n  create: function(set) {\r\n    // store reference to set\r\n    this.set = set\r\n  }\r\n\r\n})\r\n\r\n// Alias methods\r\nSVG.Set.inherit = function() {\r\n  var m\r\n    , methods = []\r\n\r\n  // gather shape methods\r\n  for(var m in SVG.Shape.prototype)\r\n    if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply shape aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        if (this.members[i] && typeof this.members[i][method] == 'function')\r\n          this.members[i][method].apply(this.members[i], arguments)\r\n\r\n      return method == 'animate' ? (this.fx || (this.fx = new SVG.FX.Set(this))) : this\r\n    }\r\n  })\r\n\r\n  // clear methods for the next round\r\n  methods = []\r\n\r\n  // gather fx methods\r\n  for(var m in SVG.FX.prototype)\r\n    if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply fx aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.FX.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.set.members.length; i < il; i++)\r\n        this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments)\r\n\r\n      return this\r\n    }\r\n  })\r\n}\r\n\n\r\nSVG.extend(SVG.Element, {\r\n  // Store data values on svg nodes\r\n  data: function(a, v, r) {\r\n    if (typeof a == 'object') {\r\n      for (v in a)\r\n        this.data(v, a[v])\r\n\r\n    } else if (arguments.length < 2) {\r\n      try {\r\n        return JSON.parse(this.attr('data-' + a))\r\n      } catch(e) {\r\n        return this.attr('data-' + a)\r\n      }\r\n\r\n    } else {\r\n      this.attr(\r\n        'data-' + a\r\n      , v === null ?\r\n          null :\r\n        r === true || typeof v === 'string' || typeof v === 'number' ?\r\n          v :\r\n          JSON.stringify(v)\r\n      )\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Remember arbitrary data\r\n  remember: function(k, v) {\r\n    // remember every item in an object individually\r\n    if (typeof arguments[0] == 'object')\r\n      for (var v in k)\r\n        this.remember(v, k[v])\r\n\r\n    // retrieve memory\r\n    else if (arguments.length == 1)\r\n      return this.memory()[k]\r\n\r\n    // store memory\r\n    else\r\n      this.memory()[k] = v\r\n\r\n    return this\r\n  }\r\n\r\n  // Erase a given memory\r\n, forget: function() {\r\n    if (arguments.length == 0)\r\n      this._memory = {}\r\n    else\r\n      for (var i = arguments.length - 1; i >= 0; i--)\r\n        delete this.memory()[arguments[i]]\r\n\r\n    return this\r\n  }\r\n\r\n  // Initialize or return local memory object\r\n, memory: function() {\r\n    return this._memory || (this._memory = {})\r\n  }\r\n\r\n})\n// Method for getting an element by id\r\nSVG.get = function(id) {\r\n  var node = document.getElementById(idFromReference(id) || id)\r\n  return SVG.adopt(node)\r\n}\r\n\r\n// Select elements by query string\r\nSVG.select = function(query, parent) {\r\n  return new SVG.Set(\r\n    SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\r\n      return SVG.adopt(node)\r\n    })\r\n  )\r\n}\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Scoped select method\r\n  select: function(query) {\r\n    return SVG.select(query, this.node)\r\n  }\r\n\r\n})\nfunction pathRegReplace(a, b, c, d) {\r\n  return c + d.replace(SVG.regex.dots, ' .')\r\n}\r\n\r\n// creates deep clone of array\r\nfunction array_clone(arr){\r\n  var clone = arr.slice(0)\r\n  for(var i = clone.length; i--;){\r\n    if(Array.isArray(clone[i])){\r\n      clone[i] = array_clone(clone[i])\r\n    }\r\n  }\r\n  return clone\r\n}\r\n\r\n// tests if a given element is instance of an object\r\nfunction is(el, obj){\r\n  return el instanceof obj\r\n}\r\n\r\n// tests if a given selector matches an element\r\nfunction matches(el, selector) {\r\n  return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\r\n}\r\n\r\n// Convert dash-separated-string to camelCase\r\nfunction camelCase(s) {\r\n  return s.toLowerCase().replace(/-(.)/g, function(m, g) {\r\n    return g.toUpperCase()\r\n  })\r\n}\r\n\r\n// Capitalize first letter of a string\r\nfunction capitalize(s) {\r\n  return s.charAt(0).toUpperCase() + s.slice(1)\r\n}\r\n\r\n// Ensure to six-based hex\r\nfunction fullHex(hex) {\r\n  return hex.length == 4 ?\r\n    [ '#',\r\n      hex.substring(1, 2), hex.substring(1, 2)\r\n    , hex.substring(2, 3), hex.substring(2, 3)\r\n    , hex.substring(3, 4), hex.substring(3, 4)\r\n    ].join('') : hex\r\n}\r\n\r\n// Component to hex value\r\nfunction compToHex(comp) {\r\n  var hex = comp.toString(16)\r\n  return hex.length == 1 ? '0' + hex : hex\r\n}\r\n\r\n// Calculate proportional width and height values when necessary\r\nfunction proportionalSize(element, width, height) {\r\n  if (width == null || height == null) {\r\n    var box = element.bbox()\r\n\r\n    if (width == null)\r\n      width = box.width / box.height * height\r\n    else if (height == null)\r\n      height = box.height / box.width * width\r\n  }\r\n\r\n  return {\r\n    width:  width\r\n  , height: height\r\n  }\r\n}\r\n\r\n// Delta transform point\r\nfunction deltaTransformPoint(matrix, x, y) {\r\n  return {\r\n    x: x * matrix.a + y * matrix.c + 0\r\n  , y: x * matrix.b + y * matrix.d + 0\r\n  }\r\n}\r\n\r\n// Map matrix array to object\r\nfunction arrayToMatrix(a) {\r\n  return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\r\n}\r\n\r\n// Parse matrix if required\r\nfunction parseMatrix(matrix) {\r\n  if (!(matrix instanceof SVG.Matrix))\r\n    matrix = new SVG.Matrix(matrix)\r\n\r\n  return matrix\r\n}\r\n\r\n// Add centre point to transform object\r\nfunction ensureCentre(o, target) {\r\n  o.cx = o.cx == null ? target.bbox().cx : o.cx\r\n  o.cy = o.cy == null ? target.bbox().cy : o.cy\r\n}\r\n\r\n// PathArray Helpers\r\nfunction arrayToString(a) {\r\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\r\n    s += a[i][0]\r\n\r\n    if (a[i][1] != null) {\r\n      s += a[i][1]\r\n\r\n      if (a[i][2] != null) {\r\n        s += ' '\r\n        s += a[i][2]\r\n\r\n        if (a[i][3] != null) {\r\n          s += ' '\r\n          s += a[i][3]\r\n          s += ' '\r\n          s += a[i][4]\r\n\r\n          if (a[i][5] != null) {\r\n            s += ' '\r\n            s += a[i][5]\r\n            s += ' '\r\n            s += a[i][6]\r\n\r\n            if (a[i][7] != null) {\r\n              s += ' '\r\n              s += a[i][7]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return s + ' '\r\n}\r\n\r\n// Deep new id assignment\r\nfunction assignNewId(node) {\r\n  // do the same for SVG child nodes as well\r\n  for (var i = node.childNodes.length - 1; i >= 0; i--)\r\n    if (node.childNodes[i] instanceof window.SVGElement)\r\n      assignNewId(node.childNodes[i])\r\n\r\n  return SVG.adopt(node).id(SVG.eid(node.nodeName))\r\n}\r\n\r\n// Add more bounding box properties\r\nfunction fullBox(b) {\r\n  if (b.x == null) {\r\n    b.x      = 0\r\n    b.y      = 0\r\n    b.width  = 0\r\n    b.height = 0\r\n  }\r\n\r\n  b.w  = b.width\r\n  b.h  = b.height\r\n  b.x2 = b.x + b.width\r\n  b.y2 = b.y + b.height\r\n  b.cx = b.x + b.width / 2\r\n  b.cy = b.y + b.height / 2\r\n\r\n  return b\r\n}\r\n\r\n// Get id from reference string\r\nfunction idFromReference(url) {\r\n  var m = (url || '').toString().match(SVG.regex.reference)\r\n\r\n  if (m) return m[1]\r\n}\r\n\r\n// If values like 1e-88 are passed, this is not a valid 32 bit float,\r\n// but in those cases, we are so close to 0 that 0 works well!\r\nfunction float32String(v) {\r\n  return Math.abs(v) > 1e-37 ? v : 0\r\n}\r\n\r\n// Create matrix array for looping\r\nvar abcdef = 'abcdef'.split('')\r\n\n// Add CustomEvent to IE9 and IE10\r\nif (typeof window.CustomEvent !== 'function') {\r\n  // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\r\n  var CustomEventPoly = function(event, options) {\r\n    options = options || { bubbles: false, cancelable: false, detail: undefined }\r\n    var e = document.createEvent('CustomEvent')\r\n    e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail)\r\n    return e\r\n  }\r\n\r\n  CustomEventPoly.prototype = window.Event.prototype\r\n\r\n  SVG.CustomEvent = CustomEventPoly\r\n} else {\r\n  SVG.CustomEvent = window.CustomEvent\r\n}\r\n\r\n// requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\r\n(function(w) {\r\n  var lastTime = 0\r\n  var vendors = ['moz', 'webkit']\r\n\r\n  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\r\n    w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame']\r\n    w.cancelAnimationFrame  = w[vendors[x] + 'CancelAnimationFrame'] ||\r\n                              w[vendors[x] + 'CancelRequestAnimationFrame']\r\n  }\r\n\r\n  w.requestAnimationFrame = w.requestAnimationFrame ||\r\n    function(callback) {\r\n      var currTime = new Date().getTime()\r\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime))\r\n\r\n      var id = w.setTimeout(function() {\r\n        callback(currTime + timeToCall)\r\n      }, timeToCall)\r\n\r\n      lastTime = currTime + timeToCall\r\n      return id\r\n    }\r\n\r\n  w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\r\n\r\n}(window))\r\n\r\nreturn SVG\r\n\r\n}));\r","/**\n * Internal message interface between the worker and the master.\n *\n * None of this is public API.\n */\n\n/* API documentation barrier. */\n\nimport { SchedulingFailure } from './api-types';\nimport { computeSchedule } from './scheduling';\n\n// Ambient declarations.\n//\n// We do not rely on the TypeScript webworker library, because the current file is meant to be importable also by code\n// that requires the DOM library. However, Web Worker API and DOM are at present mutually exclusive.\n// https://github.com/Microsoft/TypeScript/issues/20595\n// Since the Web Worker API used in this file is extremely simple, we just make the declarations ourselves here.\n\ndeclare global {\n  /**\n   * A web worker’s global scope.\n   */\n  interface DedicatedWorkerGlobalScope {\n    /**\n     * EventHandler to be called when a message is sent to the worker using its `postMessage()` method.\n     */\n    onmessage: ((this: DedicatedWorkerGlobalScope, event: MessageEvent) => any) | null;\n\n    /**\n     * Sends a message to the main thread that spawned the worker.\n     *\n     * The web worker API specifies an optional second argument for postMessage(), which we do not use. Unfortunately,\n     * information on the web is not crystal clear on whether it should be possible to transfer (without copying) a\n     * plain JavaScript object from the worker to the thread that spawned it. In C++ terminology, this would be called\n     * move semantics.\n     *\n     * See for instance a discussion on\n     * [StackOverflow](https://stackoverflow.com/questions/33544994/pass-object-by-reference-from-to-webworker) or a\n     * related\n     * [issue of the TypeScript project on GitHub]\n     * (https://github.com/Microsoft/TypeScript/issues/25176#issuecomment-400117198).\n     *\n     * For now the answer is, however, very clear. It is not possible. Chrome 74 reports \"Value at index 0 does not have\n     * a transferable type\" if we were to set the `transfer` argument in the postMessage() invocation to `[plainObject]`\n     * (i.e., an array with a plain JavaScript object as only element).\n     */\n    postMessage(message: any): void;\n\n    /**\n     * Closes the worker from inside the worker itself.\n     */\n    close(): void;\n  }\n\n  /**\n   * The DedicatedWorkerGlobalScope constructor.\n   */\n  // tslint:disable-next-line:variable-name\n  let DedicatedWorkerGlobalScope: new() => DedicatedWorkerGlobalScope;\n}\n\n/**\n * Type guard that returns whether the given value is a {@link DedicatedWorkerGlobalScope}.\n */\nexport function isDedicatedWorkerGlobalScope(value: any): value is DedicatedWorkerGlobalScope {\n  return typeof DedicatedWorkerGlobalScope === 'function' && value instanceof DedicatedWorkerGlobalScope;\n}\n\n\n// Internal interfaces\n\n/**\n * Message from master to worker with all information to start processing.\n */\nexport type ComputeScheduleParameters = Parameters<typeof computeSchedule>;\n\n/**\n * Message from worker to master containing the result.\n */\nexport type ComputeScheduleReturnType = ReturnType<typeof computeSchedule>;\n\n/**\n * Factory for a web worker.\n *\n * The {@link Worker} constructor requires a script URL that is either absolute or relative *to the the domain* of the\n * current script. See: https://html.spec.whatwg.org/multipage/workers.html#dom-worker\n *\n * Unfortunately, the location of the current script is generally unknowable. Additionally, in case of the UMD\n * distribution of this module, the worker script is the simply the current script (for ease of distribution).\n * Otherwise, the worker script is in a separate file, and we expect a bundler to substitute the correct absolute URL at\n * build time.\n */\nexport interface WorkerFactory {\n  /**\n   * Creates and returns a new {@link Worker}, or a failure if an error occurs.\n   */\n  createWorker?: () => Worker | SchedulingFailure;\n}\n\nexport const workerFactory: WorkerFactory = {};\n","// Builders like Parcel substitute the constructor argument if it is a relative path.\nimport { workerFactory } from './worker-interface';\n\nworkerFactory.createWorker = () => new Worker('./worker.ts');\n","/**\n * Enumeration of the job-splitting options.\n */\nexport enum JobSplitting {\n  // Note that this is deliberately not a const enum. The TypeScript compiler inlines const enums, which means that the\n  // generated declaration file is *required* for compiling into valid JavaScript. However, the declaration file may not\n  // always be taken into consideration or even available. For example, the parcel bundler uses `transpileModule()` for\n  // TypeScript assets:\n  // https://github.com/parcel-bundler/parcel/blob/parcel-bundler%401.12.3/packages/core/parcel-bundler/src/assets/TypeScriptAsset.js#L46-L49\n  // However, `transpileModule()` is just a simple transform function:\n  // https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API#a-simple-transform-function\n  // It does not look at any imports at all:\n  // https://github.com/Microsoft/TypeScript/issues/5243\n\n  /**\n   * The job needs to be executed by a single machine en bloc (that is, with a single job fragment).\n   */\n  NONE = 'none',\n\n  /**\n   * The job needs to be executed by a single machine but it allows preemption; that is, its execution may be\n   * interrupted by other jobs.\n   */\n  PREEMPTION = 'preemption',\n\n  /**\n   * The job can be executed by multiple machines, and it also allows preemption.\n   */\n  MULTIPLE_MACHINES = 'multi',\n}\n\n/**\n * A job.\n */\nexport interface Job {\n  /**\n   * The processing requirement of a job (or, more succinctly, the job size).\n   *\n   * The actual *processing time* of a job (or job fragment) on a machine with speed `speed` is\n   * `Math.ceil(size / speed)`. This is the amount of time the machine is busy. In addition, a job may also have a\n   * delivery time. During that time, the machine is already available again and can process other jobs.\n   *\n   * If the job size is 0, the corresponding {@link ScheduledJob} will contain no {@link JobFragment} for *processing*\n   * this job. However, if {@link deliveryTime} is greater than 0, there would still be a job fragment for the delivery\n   * time (which starts at time 0).\n   *\n   * Jobs with both {@link size} and {@link deliveryTime} equal to 0 are explicitly allowed. They can be useful to\n   * specify a dependency between *sets* of jobs. For example, suppose `A` and `B` are disjoint sets of `n` and `m`\n   * jobs, respectively. Suppose each job in `B` depends on all jobs in `A`. However, instead of introducing `m * n`\n   * dependencies, it is easier to introduce a dummy job `c` with {@link size} and {@link deliveryTime} equal to 0 and\n   * with a dependency on each job in `A`. Moreover, each job in `B` depends on `c`. This way, only `m + n` dependencies\n   * are necessary to express the set-dependency.\n   */\n  size: number;\n\n  /**\n   * Delivery time of a job, independent of the machine that it is scheduled on.\n   *\n   * During the delivery time of a job, a machine is available again to process other jobs. However, no dependents of\n   * this job can start before the delivery time has elapsed.\n   *\n   * In the computed {@link Schedule}, a separate {@link JobFragment} will be created to represent the delivery time. If\n   * {@link splitting} is {@link JobSplitting.MULTIPLE_MACHINES}, then this job fragment will be assigned to the machine\n   * specified by {@link preAssignment} (or simply the first machine if that field is `undefined`).\n   *\n   * The default is no delivery time; that is, 0.\n   */\n  deliveryTime?: number;\n\n  /**\n   * Whether the job allows preemption or may be processed concurrently by more than one machine at a time.\n   *\n   * The default is {@link JobSplitting.PREEMPTION}.\n   */\n  splitting?: JobSplitting;\n\n  /**\n   * Indices of the jobs that this job depends on.\n   *\n   * Dependencies are finish-to-start; that is, a job cannot start before all job dependencies are fully completed\n   * (including any delivery time they may have).\n   *\n   * The default is no dependencies; that is, the empty array.\n   */\n  dependencies?: number[];\n\n  /**\n   * The earliest possible start time for this job.\n   *\n   * This constraint is in addition to {@link dependencies}.\n   *\n   * The default is none; that is, an earliest possible start time of 0.\n   */\n  releaseTime?: number;\n\n  /**\n   * Index of the machine that this job must be assigned to.\n   *\n   * If both this is set and {@link splitting} is {@link JobSplitting.MULTIPLE_MACHINES}, then this field only\n   * determines what machine the delivery time (if any) will be assigned to.\n   *\n   * The default is no pre-assignment.\n   */\n  preAssignment?: number;\n}\n\n/**\n * An instance of the scheduling problem solved by this module.\n */\nexport interface SchedulingInstance {\n  /**\n   * The speeds of the machines available for processing jobs.\n   *\n   * The length of this array determines the number of machines available.\n   */\n  machineSpeeds: number[];\n\n  /**\n   * The jobs that needs to be processed on one (or more) of the available machines.\n   *\n   * The dependency graph induced by {@link Job.dependencies} must be an acyclic graph.\n   */\n  jobs: Job[];\n\n  /**\n   * The minimum processing requirement that a job fragment must have.\n   *\n   * The default is 0 (that is, there is no effective minimum).\n   */\n  minFragmentSize?: number;\n}\n\n/**\n * A job fragment is a an assignment of a job (or part of it) to a machine at a specific time.\n */\nexport interface JobFragment {\n  /**\n   * The machine that this job fragment is scheduled to be executed by.\n   */\n  machine: number;\n\n  /**\n   * The wall clock start time for this job fragment.\n   */\n  start: number;\n\n  /**\n   * The wall clock end time for this job fragment.\n   */\n  end: number;\n\n  /**\n   * Whether this job fragment represents delivery time.\n   *\n   * If true, this job fragment does not prevent other jobs to be scheduled concurrently on the same machine. However,\n   * any dependent job can only execute once all processing of this job has been finished and the delivery time has\n   * elapsed.\n   */\n  isWaiting: boolean;\n}\n\n/**\n * A scheduled job consists of one or more job fragments.\n *\n * The job fragments are sorted by {@link JobFragment.end} and {@link JobFragment.machine} (in that order). Fragments on\n * the same machine are guaranteed to not overlap. Moreover, if `a` and `b` are two consecutive job fragments on the\n * same machine with `a.end === b.start`, then they differ in {@link JobFragment.isWaiting}.\n */\nexport type ScheduledJob = JobFragment[];\n\n/**\n * A schedule is an array of scheduled jobs.\n *\n * Machines are identified by their array index. For the result returned by {@link computeSchedule}(), there is a 1:1\n * correspondence between the jobs in {@link Schedule} and in {@link SchedulingInstance.jobs} (given as argument).\n */\nexport type Schedule = ScheduledJob[];\n\n/**\n * Describes a failure while computing a schedule in {@link computeSchedule}().\n */\nexport type SchedulingFailure = string;\n\n/**\n * Returns whether the given value is a {@link SchedulingFailure}.\n */\nexport function isSchedulingFailure(value: any): value is SchedulingFailure {\n  return typeof value === 'string';\n}\n","/**\n * A classical min-heap.\n */\n\n/** API documentation barrier */\n\n/**\n * Comparator function for the min-heap.\n */\nexport type Comparator<T> = (left: T, right: T) => number;\n\nfunction parentIdx(idx: number): number {\n  return Math.trunc((idx - 1) / 2);\n}\n\nfunction leftChildIdx(idx: number): number {\n  return 2 * idx + 1;\n}\n\nfunction rightChildIdx(idx: number): number {\n  return 2 * idx + 2;\n}\n\nfunction swap<T>(array: T[], leftIdx: number, rightIdx: number): void {\n  const temp = array[leftIdx];\n  array[leftIdx] = array[rightIdx];\n  array[rightIdx] = temp;\n}\n\nfunction heapify<T>(array: T[], comparatorFn: Comparator<T>, rootIdx: number) {\n  // Precondition: indices leftChildIdx(rootIdx) and rightChildIdx(rootIdx) are roots of heaps\n  let currentIdx = rootIdx;\n  do {\n    let minIdx = currentIdx;\n    const l = leftChildIdx(currentIdx);\n    if (l < array.length && comparatorFn(array[l], array[minIdx]) < 0) {\n      minIdx = l;\n    }\n    const r = rightChildIdx(currentIdx);\n    if (r < array.length && comparatorFn(array[r], array[minIdx]) < 0) {\n      minIdx = r;\n    }\n    if (minIdx === currentIdx) {\n      break;\n    }\n    swap(array, currentIdx, minIdx);\n    currentIdx = minIdx;\n  } while (true);\n}\n\n/**\n * A binary min-heap.\n *\n * @typeparam T the type of elements held in this min heap\n */\nexport default class MinHeap<T> {\n  private readonly comparatorFn_: Comparator<T>;\n  private readonly array_: T[];\n\n  constructor(iterable: Iterable<T>, comparatorFn: Comparator<T>) {\n    this.comparatorFn_ = comparatorFn;\n    this.array_ = Array.from(iterable);\n    for (let i = Math.trunc(this.array_.length / 2) - 1; i >= 0; --i) {\n      heapify(this.array_, this.comparatorFn_, i);\n    }\n  }\n\n  /**\n   * Inserts the given element into this min-heap.\n   *\n   * The runtime of this operation is O(log n).\n   *\n   * @param element the element to add\n   */\n  public add(element: T): void {\n    this.array_.push(element);\n    let currentIdx = this.array_.length - 1;\n    do {\n      const p = parentIdx(currentIdx);\n      if (currentIdx <= 0 || this.comparatorFn_(this.array_[p], this.array_[currentIdx]) < 0) {\n        break;\n      }\n      swap(this.array_, p, currentIdx);\n      currentIdx = p;\n    } while (true);\n  }\n\n  /**\n   * Retrieves and removes the minimum element of this min-heap.\n   *\n   * The runtime of this operation is O(log n).\n   *\n   * @return the minimum element or undefined if the min-heap is empty\n   */\n  public extractMin(): T | undefined {\n    if (this.array_.length === 0) {\n      return undefined;\n    } else if (this.array_.length === 1) {\n      return this.array_.pop();\n    }\n\n    const min = this.array_[0];\n    this.array_[0] = this.array_.pop()!;\n    heapify(this.array_, this.comparatorFn_, 0);\n    return min;\n  }\n\n  /**\n   * Returns whether this min-heap is empty.\n   */\n  public isEmpty(): boolean {\n    return this.array_.length === 0;\n  }\n}\n","/**\n * Algorithm for project planning. More precisely, *list scheduling* with support for machines running at different\n * speeds, optional preemption, optional splitting of jobs across machines, release dates, and delivery times.\n *\n * See README file for details.\n */\n\n/** API documentation barrier */\n\nimport { strict as assert } from 'assert';\nimport {\n  Job,\n  JobFragment,\n  JobSplitting,\n  Schedule,\n  ScheduledJob,\n  SchedulingFailure,\n  SchedulingInstance,\n} from './api-types';\nimport MinHeap from './minheap';\n\n/**\n * Type that consists of the union of all properties that are marked as optional through a question mark.\n *\n * Note that properties that have undefined in their domain, but no question mark next to the property name are *not*\n * included. Also note that, in strict compilation mode, TypeScript will add undefined to the domain of the property if\n * there is a question mark next to the property name.\n *\n * @typeparam T generic type parameter\n */\ntype OptionalPropertyNames<T extends {}> = {[K in keyof T]-?: {} extends {[_ in K]: T[K]} ? K : never}[keyof T];\ntype Defined<T> = T extends undefined ? never : T;\ntype OnlyOptionals<T extends {}> = {[K in OptionalPropertyNames<T>]: Defined<T[K]>};\n\nconst JOB_DEFAULTS = Object.freeze<OnlyOptionals<Job>>({\n  deliveryTime: 0,\n  splitting: JobSplitting.PREEMPTION,\n  dependencies: [],\n  releaseTime: 0,\n  preAssignment: -1,\n});\n\n/**\n * Runs the list scheduling algorithm on the given problem instance and returns the result.\n *\n * See [the project page](https://github.com/fschopp/project-planning-js) for more information on the algorithm.\n *\n * @param instance the problem instance\n * @return solution or a human-readable failure description if the problem instance is invalid (for example, has a\n *     cyclic dependency graph)\n */\nexport function computeSchedule(instance: SchedulingInstance): Schedule | SchedulingFailure {\n  const nonNegativeInteger = (number: number) => number >= 0 && Number.isInteger(number);\n  const positiveIntegers = (numbers: number[]) =>\n      numbers.filter((number) => number <= 0 || !Number.isInteger(number)).length === 0;\n  const undefinedOrNonNegativeInteger = (number: number | undefined) =>\n      number === undefined || nonNegativeInteger(number);\n  const undefinedOrNonNegativeIntegers = (...numbers: (number | undefined)[]) =>\n      numbers.filter((number) => !undefinedOrNonNegativeInteger(number)).length === 0;\n  const undefinedOrIntegerWithinZeroTo = (upperBoundExcl: number, number: number | undefined) =>\n      number === undefined || nonNegativeInteger(number) && number < upperBoundExcl;\n  const integersWithinZeroTo = (upperBoundExcl: number, numbers: number[]) =>\n      numbers.filter((number) => !(number >= 0 && nonNegativeInteger(number) && number < upperBoundExcl)).length === 0;\n\n  const numMachines: number = instance.machineSpeeds.length;\n  const numJobs: number = instance.jobs.length;\n\n  if (numMachines === 0) {\n    return 'At least one machine is required to compute a schedule.';\n  } else if (\n      !positiveIntegers(instance.machineSpeeds) ||\n      instance.jobs.filter((job) =>\n          !nonNegativeInteger(job.size) ||\n          !undefinedOrNonNegativeIntegers(job.deliveryTime, job.releaseTime) ||\n          !undefinedOrIntegerWithinZeroTo(numMachines, job.preAssignment) ||\n          (job.dependencies !== undefined && !integersWithinZeroTo(numJobs, job.dependencies))\n      ).length > 0 ||\n      !undefinedOrNonNegativeInteger(instance.minFragmentSize)\n  ) {\n    return 'All job processing times and machine speeds need to be non-negative integers. ' +\n        'All job dependency and pre-assignment indices need to be within bounds.';\n  }\n\n  const jobs: Required<Job>[] = instance.jobs.map((job) => Object.assign({}, JOB_DEFAULTS, job));\n  const minFragmentSize: number = instance.minFragmentSize === undefined ? 0 : instance.minFragmentSize;\n  return new ListScheduling(numMachines, instance.machineSpeeds, jobs, minFragmentSize).schedule;\n}\n\n/**\n * A gap in the schedule for a particular machine. A gap can be filled when scheduling subsequent jobs.\n */\ninterface Gap {\n  startTime: number;\n  endTime: number;\n}\n\n/**\n * Linked list of gaps.\n */\ninterface GapsList {\n  head: Gap;\n  tail: GapsList | null;\n}\n\n/**\n * A machine and associated data required by {@link ListScheduling.scheduleJob}().\n */\ninterface Machine {\n  /**\n   * Index in array of all machines.\n   *\n   * This is a value between 0 (inclusive) and the length of {@link SchedulingInstance.machineSpeeds} (exclusive).\n   */\n  readonly index: number;\n\n  /**\n   * Index in array of available machines for the current job.\n   */\n  readonly availableIdx: number;\n\n  /**\n   * Speed of the machine.\n   */\n  readonly speed: number;\n\n  /**\n   * Time when the current job fragment started on the machine, or null if the current job is not currently running on\n   * the machine.\n   */\n  currentFragmentStart: number | null;\n\n  /**\n   * Linked list of gaps.\n   *\n   * Whenever starting to schedule a job, this is initialized with a tail list of {@link ListScheduling.gapsLists_}.\n   */\n  gapsList: GapsList;\n\n  /**\n   * Node of the linked list of gaps before the current node (which is {@link gapsList}).\n   *\n   * This field is only needed to “commit” the insertion of job fragments by making changes to the gap list shared\n   * between scheduling of individual jobs.\n   */\n  previousGapsList: GapsList;\n}\n\n/**\n * Node in the job graph induced by the dependencies.\n */\ninterface JobGraphNode {\n  idx: number;\n  numDependencies: number;\n  dependents: JobGraphNode[];\n}\n\n/**\n * Abstraction for a collection of machines available for a job.\n */\ninterface AvailableMachineIndices {\n  readonly length: number;\n  forEach(callbackfn: (index: number, availableIdx: number) => void): void;\n  map<T>(callbackfn: (index: number, availableIdx: number) => T): T[];\n}\n\n/**\n * Internal class whose sole purpose is to store algorithm state, so it does not have to be inconveniently passed around\n * between functions.\n */\nclass ListScheduling {\n  public readonly schedule: Schedule | SchedulingFailure;\n\n  private readonly numMachines_: number;\n  private readonly machineSpeeds_: number[];\n  private readonly jobs_: Required<Job>[];\n  private readonly minFragmentSize_: number;\n\n  private readonly gapsLists_: GapsList[];\n\n  constructor(numMachines: number, machineSpeeds: number[], jobs: Required<Job>[], minFragmentSize: number) {\n    this.numMachines_ = numMachines;\n    this.machineSpeeds_ = machineSpeeds;\n    this.jobs_ = jobs;\n    this.minFragmentSize_ = minFragmentSize;\n\n    this.gapsLists_ = this.machineSpeeds_.map((ignoredMachineSpeed) => ({\n      head: {\n        startTime: Number.MIN_SAFE_INTEGER,\n        endTime: 0,\n      },\n      tail: {\n        head: {\n          startTime: 0,\n          endTime: Number.MAX_SAFE_INTEGER,\n        },\n        tail: null,\n      },\n    }));\n    this.schedule = this.computeSchedule();\n  }\n\n  /**\n   * Returns the next “event” for the given machine.\n   *\n   * This method has side-effects. It updates field {@link Machine.previousGapsList} and {@link Machine.gapsList} of the\n   * given machine.\n   */\n  private static nextTimeStamp(minWallClockTime: number, earliestStart: number, machine: Machine): number {\n    let currentGap: Gap = machine.gapsList.head;\n\n    assert(Number.isInteger(minWallClockTime) && Number.isInteger(earliestStart) &&\n        Number.isInteger(currentGap.startTime) && Number.isInteger(currentGap.endTime), 'Invalid arguments');\n\n    if (machine.currentFragmentStart === null) {\n      while (true) {\n        const timeStamp = Math.max(earliestStart, currentGap.startTime) + minWallClockTime;\n        if (timeStamp <= currentGap.endTime) {\n          return timeStamp;\n        }\n        assert(machine.gapsList.tail !== null, 'Invariant: last gap has endTime === Number.MAX_SAFE_INTEGER');\n        machine.previousGapsList = machine.gapsList;\n        machine.gapsList = machine.gapsList.tail!;\n        currentGap = machine.gapsList.head;\n      }\n    } else {\n      return currentGap.endTime;\n    }\n  }\n\n  /**\n   * Adjust the linked list of gaps to account for the newly scheduled job fragment.\n   *\n   * There are 4 cases to consider. The new job fragment either:\n   * 1. Fills out the current gap completely. In this case, the current gap needs to be removed\n   *    entirely.\n   * 2. Aligns with the start of the current gap, but ends before it. In this case, the start of the current gap is\n   *    changed to when the new job fragment ends.\n   * 3. Does not start with the current gap, but aligns with the end of it. In this case, the end of the current gap is\n   *    changed to when the job fragment starts.\n   * 4. If the current gap aligns with neither start nor end of the current gap, a new gap is inserted before the\n   *    current gap. It starts with the current gap and ends with the start of the job fragment. The start of the\n   *    current gap is then changed to the end of the job fragment.\n   *\n   * @param machineState State of the machine that the job fragment has been scheduled on.\n   * @param end end time of the job fragment\n   * @param commitGaps if true, then commit the updated gaps to the state that is shared across scheduling of individual\n   *     jobs\n   */\n  private adjustGaps(machineState: Machine, end: number, commitGaps: boolean): void {\n    assert(machineState.index >= 0 && machineState.index < this.numMachines_ &&\n        machineState.currentFragmentStart !== null && Number.isInteger(machineState.currentFragmentStart) &&\n        Number.isInteger(end) && machineState.currentFragmentStart <= end, 'Invalid arguments');\n\n    // machineState also points to state that is shared across scheduling of individual jobs. This shared state we must\n    // not modify if dryRun is true. We therefore cannot make modifications to the properties of\n    // machineState.previousGapsList or machineState.gap.\n\n    const start: number = machineState.currentFragmentStart!;\n    const currentGap = machineState.gapsList.head;\n\n    if (commitGaps) {\n      if (start === currentGap.startTime && end === currentGap.endTime) {\n        machineState.previousGapsList.tail = machineState.gapsList.tail;\n      } else if (start === currentGap.startTime) {\n        currentGap.startTime = end;\n      } else if (end === currentGap.endTime) {\n        currentGap.endTime = start;\n        machineState.previousGapsList = machineState.gapsList;\n        // Note that machineState.gapsList will be updated below.\n      } else {\n        machineState.previousGapsList.tail = {\n          head: {\n            startTime: currentGap.startTime,\n            endTime: start,\n          },\n          tail: machineState.gapsList,\n        };\n        currentGap.startTime = end;\n      }\n    }\n\n    if (end === currentGap.endTime) {\n      // Note that machineState.gapsList.tail === null would imply that the current gap is the last gap; that is,\n      // currentGap.endTime === Number.MAX_SAFE_INTEGER. But we are also in the case where (end === currentGap.endTime).\n      // Since we don't support schedules that long, it is safe to assert:\n      assert(machineState.gapsList.tail !== null, 'Expected currentGap.endTime < Number.MAX_SAFE_INTEGER');\n      machineState.gapsList = machineState.gapsList.tail!;\n    } else if (!commitGaps) {\n      machineState.gapsList = {\n        head: {\n          startTime: end,\n          endTime: currentGap.endTime,\n        },\n        tail: machineState.gapsList.tail,\n      };\n    }\n\n    // Upon return, we will be \"before\" the gap represented by machineState.gapsList.head.\n    machineState.currentFragmentStart = null;\n  }\n\n  private createJobFragment(machineState: Machine, end: number, scheduledJob?: ScheduledJob): void {\n    if (scheduledJob) {\n      const start: number = machineState.currentFragmentStart!;\n      if (end - start > 0) {\n        const jobFragment: JobFragment = {\n          machine: machineState.index,\n          start,\n          end,\n          isWaiting: false,\n        };\n        scheduledJob.push(jobFragment);\n      }\n    }\n    this.adjustGaps(machineState, end, scheduledJob !== undefined);\n  }\n\n  /**\n   * Schedules processing of a job and returns its completion time (excluding delivery time).\n   */\n  private scheduleJob(availableMachineIndices: AvailableMachineIndices, size: number, isPreemptible: boolean,\n      earliestStart: number, scheduledJob?: ScheduledJob): number {\n    assert(availableMachineIndices.length > 0 && Number.isInteger(size) && size >= 0 &&\n        Number.isInteger(earliestStart), 'Invalid arguments');\n\n    const minFragmentSize = isPreemptible ? Math.min(size, this.minFragmentSize_) : size;\n    let currentSpeed = 0;\n    let lastTimestamp = earliestStart;\n    let remainingSize = size;\n    const machines: Machine[] = availableMachineIndices.map((index, availableIdx): Machine => {\n      const gapsList = this.gapsLists_[index];\n      assert(gapsList.tail !== null, 'Invariant: at least 2 elements in linked list gapsList');\n      return {\n        index,\n        availableIdx,\n        speed: this.machineSpeeds_[index],\n        currentFragmentStart: null,\n        previousGapsList: gapsList,\n        gapsList: gapsList.tail!,\n      };\n    });\n\n    while (remainingSize > 0) {\n      let eventTime: number = Number.MAX_SAFE_INTEGER;\n      let machine: Machine = machines[0];\n      availableMachineIndices.forEach((index, availableIdx) => {\n        const minWallClockTime = Math.ceil(minFragmentSize / machines[availableIdx].speed);\n        const machineEventTime = ListScheduling.nextTimeStamp(minWallClockTime, earliestStart, machines[availableIdx]);\n        if (machineEventTime < eventTime) {\n          eventTime = machineEventTime;\n          machine = machines[availableIdx];\n        }\n      });\n      let isProjectedEndTime: boolean = false;\n      const currentProjectedEndTime: number = Math.ceil(lastTimestamp + remainingSize / currentSpeed);\n      if (currentProjectedEndTime < eventTime) {\n        eventTime = currentProjectedEndTime;\n        isProjectedEndTime = true;\n      }\n      assert(Number.isInteger(eventTime) && Number.isInteger(lastTimestamp) && Number.isInteger(currentSpeed),\n          'Invariant: timestamps and speeds are integers');\n      remainingSize -= (eventTime - lastTimestamp) * currentSpeed;\n      assert(!isProjectedEndTime || remainingSize <= 0,\n          'Invariant: isProjectedEndTime implies remainingSize <= 0');\n\n      if (!isProjectedEndTime) {\n        if (machine.currentFragmentStart === null) {\n          const nextGap: Gap = machine.gapsList.head;\n          machine.currentFragmentStart = Math.max(earliestStart, nextGap.startTime);\n          remainingSize -= (eventTime - machine.currentFragmentStart) * machine.speed;\n          currentSpeed += machine.speed;\n        } else {\n          this.createJobFragment(machine, eventTime, scheduledJob);\n          currentSpeed -= machine.speed;\n          assert(machine.currentFragmentStart === null && currentSpeed >= 0);\n        }\n      }\n\n      lastTimestamp = eventTime;\n      assert(Number.isInteger(lastTimestamp) && Number.isInteger(remainingSize),\n          'Invariant: timestamps and durations are integers');\n    }\n\n    availableMachineIndices.forEach((ignoredIndex, availableIdx) => {\n      if (machines[availableIdx].currentFragmentStart !== null) {\n        this.createJobFragment(machines[availableIdx], lastTimestamp, scheduledJob);\n      }\n    });\n\n    return lastTimestamp;\n  }\n\n  /**\n   * Adds the given delivery time on the given machine to the given job schedule, and returns the overall completion\n   * time of the job.\n   */\n  private static scheduleDeliveryTime(machineIdx: number, processingCompletionTime: number, deliveryTime: number,\n      scheduledJob: ScheduledJob): number {\n    assert(Number.isInteger(deliveryTime), 'Invalid arguments');\n    assert(scheduledJob.length > 0 ? processingCompletionTime === scheduledJob[scheduledJob.length - 1].end : true,\n        'Processing completion time is end timestamp of last job fragment');\n    let completionTime: number = processingCompletionTime;\n    if (deliveryTime > 0) {\n      completionTime += deliveryTime;\n      const deliveryJobFragment: JobFragment = {\n        machine: machineIdx,\n        start: processingCompletionTime,\n        end: completionTime,\n        isWaiting: true,\n      };\n      scheduledJob.push(deliveryJobFragment);\n    }\n    return completionTime;\n  }\n\n  private allMachines(): AvailableMachineIndices {\n    return {\n      length: this.machineSpeeds_.length,\n      forEach(callbackfn: (index: number, availableIdx: number) => void): void {\n        for (let i = 0; i < this.length; ++i) {\n          callbackfn(i, i);\n        }\n      },\n      map<T>(callbackfn: (index: number, availableIdx: number) => T): T[] {\n        const array: T[] = [];\n        array.length = this.length;\n        for (let i = 0; i < this.length; ++i) {\n          array[i] = callbackfn(i, i);\n        }\n        return array;\n      },\n    };\n  }\n\n  private static singleMachine(singleMachineIdx: number): AvailableMachineIndices {\n    return {\n      length: 1,\n      forEach(callbackfn: (index: number, availableIdx: number) => void): void {\n        callbackfn(singleMachineIdx, 0);\n      },\n      map<T>(callbackfn: (index: number, availableIdx: number) => T): T[] {\n        return [callbackfn(singleMachineIdx, 0)];\n      },\n    };\n  }\n\n  private computeSchedule(): Schedule | SchedulingFailure {\n    const noDependencyNodes: JobGraphNode[] = [];\n    const jobGraphNodes: JobGraphNode[] = this.jobs_.map((job, index): JobGraphNode => ({\n      idx: index,\n      numDependencies: job.dependencies.length,\n      dependents: [],\n    }));\n    for (let i = 0; i < this.jobs_.length; ++i) {\n      const job = this.jobs_[i];\n      const jobGraphNode = jobGraphNodes[i];\n      for (const dependencyIdx of job.dependencies) {\n        jobGraphNodes[dependencyIdx].dependents.push(jobGraphNode);\n      }\n      if (job.dependencies.length === 0) {\n        noDependencyNodes.push(jobGraphNode);\n      }\n    }\n\n    const allMachines: AvailableMachineIndices = this.allMachines();\n    const newSchedule: Schedule = this.jobs_.map((ignoredJob) => []);\n    const finishTimes: number[] = this.jobs_.map((ignoredJob) => -1);\n    let numScheduledJobs = 0;\n    const noDependencyNodesHeap = new MinHeap<JobGraphNode>(noDependencyNodes, (left, right) => left.idx - right.idx);\n    while (!noDependencyNodesHeap.isEmpty()) {\n      const jobGraphNode: JobGraphNode = noDependencyNodesHeap.extractMin()!;\n      const job = this.jobs_[jobGraphNode.idx];\n      const isPreemptible: boolean = job.splitting !== JobSplitting.NONE;\n      const earliestStartTime = job.dependencies.reduce((previousEarliestStartTime, dependencyIdx) => {\n        const dependencyFinishTime: number = finishTimes[dependencyIdx];\n        assert(dependencyFinishTime >= 0, 'Dependencies are scheduled before their dependents');\n        return Math.max(previousEarliestStartTime, dependencyFinishTime);\n      }, job.releaseTime);\n      let availableMachines: AvailableMachineIndices = allMachines;\n      let deliveryMachineIdx: number | undefined;\n      if (job.splitting === JobSplitting.MULTIPLE_MACHINES) {\n        deliveryMachineIdx = job.preAssignment >= 0\n            ? job.preAssignment\n            : 0;\n      } else if (job.preAssignment >= 0) {\n        availableMachines = ListScheduling.singleMachine(job.preAssignment);\n        deliveryMachineIdx = job.preAssignment;\n      } else {\n        let maxCompletionTime: number = Number.MAX_SAFE_INTEGER;\n        for (let i = 0; i < this.numMachines_; ++i) {\n          const currentAvailableMachines = ListScheduling.singleMachine(i);\n          const currentCompletionTime =\n              this.scheduleJob(currentAvailableMachines, job.size, isPreemptible, earliestStartTime);\n          if (currentCompletionTime < maxCompletionTime) {\n            availableMachines = currentAvailableMachines;\n            deliveryMachineIdx = i;\n            maxCompletionTime = currentCompletionTime;\n          }\n        }\n      }\n      assert(deliveryMachineIdx !== undefined);\n      const completionTime: number = this.scheduleJob(\n          availableMachines, job.size, isPreemptible, earliestStartTime, newSchedule[jobGraphNode.idx]);\n      finishTimes[jobGraphNode.idx] = ListScheduling.scheduleDeliveryTime(\n          deliveryMachineIdx!, completionTime, job.deliveryTime, newSchedule[jobGraphNode.idx]);\n      ++numScheduledJobs;\n      for (const dependent of jobGraphNode.dependents) {\n        --dependent.numDependencies;\n        if (dependent.numDependencies === 0) {\n          noDependencyNodesHeap.add(dependent);\n        }\n      }\n    }\n\n    return numScheduledJobs !== this.jobs_.length\n        ? 'Detected a cycle in the dependency graph.'\n        : newSchedule;\n  }\n}\n","import { strict as assert } from 'assert';\nimport { isSchedulingFailure, Schedule, SchedulingFailure } from './api-types';\nimport { ComputeScheduleParameters, ComputeScheduleReturnType, workerFactory } from './worker-interface';\n\n/**\n * Runs (in a separate thread) the list scheduling algorithm on the given problem instance and returns the result\n * asynchronously.\n *\n * See [the project page](https://github.com/fschopp/project-planning-js) for more information on the algorithm.\n *\n * @param args argument list that will be passed on to {@link computeSchedule}() unaltered\n * @return promise that will be resolved with the solution or rejected with a {@link SchedulingFailure} containing a\n *     human-readable failure description if the problem instance is invalid (for example, has a cyclic dependency\n *     graph)\n */\nexport function computeScheduleAsync(...args: ComputeScheduleParameters): Promise<Schedule> {\n  assert(workerFactory.createWorker !== undefined, 'workerFactory.createWorker cannot be undefined');\n  const worker: Worker | SchedulingFailure = workerFactory.createWorker!();\n  if (isSchedulingFailure(worker)) {\n    const failure: SchedulingFailure = worker;\n    return Promise.reject(failure);\n  }\n\n  let isSettled: boolean = false;\n  // From MDN: \"the executor is called before the Promise constructor even returns the created object\"\n  // Hence all worker callbacks are in place before we send it the \"go\" message below.\n  const promise = new Promise<Schedule>((resolve, reject) => {\n    worker.onmessage = (event: MessageEvent) => {\n      const result: ComputeScheduleReturnType = event.data;\n      if (isSchedulingFailure(result)) {\n        assert(!isSettled, 'Attempted to settle promise more than once.');\n        reject(result);\n        isSettled = true;\n      } else {\n        assert(!isSettled, 'Attempted to settle promise more than once.');\n        resolve(result);\n        isSettled = true;\n      }\n    };\n    worker.onerror = (event: ErrorEvent) => {\n      worker.terminate();\n      const failure: SchedulingFailure = 'A runtime error occurred in source file ' +\n          `${event.filename} (line ${event.lineno}:${event.colno}):\\n${event.message}`;\n      // In theory, the worker could still cause an error after it has sent its last message. However, the ES6\n      // specification says:\n      // \"Attempting to resolve or reject a resolved promise has no effect.\"\n      // https://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects\n      // Hence, there is no race condition. On the other hand, we don't want to swallow the problem. Therefore, we\n      // add an assertion:\n      assert(!isSettled, 'Attempted to settle promise more than once.');\n      reject(failure);\n      isSettled = true;\n    };\n  });\n  worker.postMessage(args);\n  return promise;\n}\n","import './bundler-worker-factory';\n\nexport * from './api-types';\nexport * from './scheduling';\nexport * from './scheduling-async';\n","import IntervalTree from 'node-interval-tree';\nimport SVG from 'svg.js';\nimport {\n  computeSchedule,\n  computeScheduleAsync,\n  isSchedulingFailure,\n  JobFragment,\n  Schedule,\n  SchedulingFailure,\n  SchedulingInstance,\n} from '../main';\n\n\n// Constants\n\nconst SOURCE_PARAM_NAME: string = 'src';\nconst SPACING: number = 10;\nconst MACHINE_HEIGHT: number = 20;\n\ntype AlertKind = 'success' | 'warning';\nconst ALERT_KINDS: readonly AlertKind[] = Object.freeze(['success', 'warning']);\n\n\n// Global state (sigh)\n\nlet hashFromShareLink: string = '';\n\n\n// Data structures for visualization\n\ninterface VisualizedJobFragment extends JobFragment {\n  jobIdx: number;\n  layer: number;\n}\n\ninterface Machine {\n  index: number;\n  top: number;\n  numLayers: number;\n  fragments: IntervalTree<VisualizedJobFragment>;\n}\n\ninterface Visualization {\n  scheduleLength: number;\n  machines: Machine[];\n}\n\n\n// HTML elements\n// Implied assumption here is this script is loaded after all of the following elements (the <script> element is at the\n// very end).\n\nconst svgRoot = SVG('drawing').size('100%', 0);\nconst instanceInput = document.getElementById('instance')! as HTMLTextAreaElement;\nconst separateThread = document.getElementById('chkSeparateThread')! as HTMLInputElement;\nconst scheduleOutput = document.getElementById('schedule')! as HTMLTextAreaElement;\nconst feedback = document.getElementById('feedback') as HTMLDivElement;\nconst feedbackTitle: HTMLElement = feedback.querySelector('strong')!;\nconst feedbackMsg: HTMLElement = feedback.querySelector('span')!;\n\n\n// Implementation\n\nfunction computeVisualization(instance: SchedulingInstance, result: Schedule): Visualization {\n  const visualization: Visualization = {\n    scheduleLength: 0,\n    machines: instance.machineSpeeds.map((ignoredSpeed, index) => ({\n      index,\n      top: 0,\n      numLayers: 1,\n      fragments: new IntervalTree<VisualizedJobFragment>(),\n    })),\n  };\n\n  for (let scheduledJobIdx = 0; scheduledJobIdx < result.length; ++scheduledJobIdx) {\n    const scheduledJob = result[scheduledJobIdx];\n    for (const jobFragment of scheduledJob) {\n      visualization.scheduleLength = Math.max(visualization.scheduleLength, jobFragment.end);\n      const machine = visualization.machines[jobFragment.machine];\n      const halfOpenInterval: [number, number] = [jobFragment.start, jobFragment.end - 0.5];\n      const existingLayers: number[] = machine.fragments.search(...halfOpenInterval)\n          .map((fragment) => (fragment as VisualizedJobFragment).layer).sort();\n      let newLayer = 0;\n      for (const existingLayer of existingLayers) {\n        if (newLayer < existingLayer) {\n          break;\n        } else if (newLayer === existingLayer) {\n          newLayer = existingLayer + 1;\n        }\n      }\n      machine.numLayers = Math.max(machine.numLayers, newLayer + 1);\n      const extendedJobFragment: VisualizedJobFragment = {\n        jobIdx: scheduledJobIdx,\n        layer: newLayer,\n        ...jobFragment,\n      };\n      // Unfortunately, the interval tree implements closed intervals. Since our algorithm is guaranteed to output\n      // integer solutions, we can simulate half-closed intervals slightly reducing the upper bound.\n      machine.fragments.insert(halfOpenInterval[0], halfOpenInterval[1], extendedJobFragment);\n    }\n  }\n  return visualization;\n}\n\nfunction createSvg(draw: SVG.Doc, visualization: Visualization): void {\n  // The first rule sets the font-family only if the SVG is used stand-alone. Otherwise, we want to inherit.\n  draw.clear().width('100%').element('style').attr('type', 'text/css').words(`/* <![CDATA[ */\nsvg:root {\n  font-family: sans-serif;\n}\n\n.row-in-schedule:nth-child(odd) > rect {\n  fill: none;\n}\n\n.row-in-schedule:nth-child(even) > rect {\n  fill: #e3e3e3\n}\n\n.schedule-baseline {\n  stroke: black;\n  stroke-width: 2px;\n}\n\n.schedule-finish-line {\n  stroke: #DDD;\n  stroke-width: 1px;\n}\n\n#drawing {\n  overflow-x: auto;\n}\n/* ]]> */`);\n\n  // Create machine labels first\n  const machineLabels: SVG.Text[] = [];\n  let maxLabelWidth: number = 0;\n  for (const machine of visualization.machines) {\n    const label: SVG.Text = draw.plain(`Machine ${machine.index}`).font({anchor: 'end'}).attr('font-family', null);\n    machineLabels.push(label);\n    maxLabelWidth = Math.max(label.bbox().width, maxLabelWidth);\n  }\n\n  const drawWidth = draw.node.clientWidth || (draw.node.parentNode as HTMLElement).clientWidth;\n  const scalingFactor = (drawWidth - (maxLabelWidth + 3 * SPACING)) / visualization.scheduleLength;\n\n  const g = draw.group();\n  const rowBackgroundsGroup = g.group();\n  let top: number = 0;\n  for (let i = 0; i < visualization.machines.length; ++i) {\n    const machine = visualization.machines[i];\n    const machineLabel = machineLabels[i];\n    const rowGroup = rowBackgroundsGroup.group().addClass('row-in-schedule');\n\n    rowGroup\n        .rect(\n            maxLabelWidth + 3 * SPACING + scalingFactor * visualization.scheduleLength,\n            MACHINE_HEIGHT * machine.numLayers + SPACING\n        )\n        .move(-maxLabelWidth - 2 * SPACING, top - SPACING / 2);\n    machineLabel.addTo(rowGroup).move(-SPACING, top);\n    for (const interval of machine.fragments.inOrder()) {\n      const jobFragment: VisualizedJobFragment = interval.data;\n      const jobFragmentGroup = g.group().opacity(jobFragment.isWaiting ? 0.5 : 1);\n      jobFragmentGroup\n          .rect(scalingFactor * (jobFragment.end - jobFragment.start), MACHINE_HEIGHT)\n          .fill('none')\n          .stroke('black')\n          .move(scalingFactor * jobFragment.start, top + jobFragment.layer * MACHINE_HEIGHT);\n      jobFragmentGroup\n          .plain(`Job ${jobFragment.jobIdx}`)\n          .font({anchor: 'middle'})\n          .attr({'font-family': null})\n          .move(scalingFactor * (jobFragment.end + jobFragment.start) / 2, top + jobFragment.layer * MACHINE_HEIGHT);\n    }\n    top += MACHINE_HEIGHT * machine.numLayers + SPACING;\n  }\n  g.line(0, -SPACING, 0, top).addClass('schedule-baseline');\n  const finishLine = g\n      .line(scalingFactor * visualization.scheduleLength, -SPACING, scalingFactor * visualization.scheduleLength, top)\n      .addClass('schedule-finish-line');\n  const lengthLabel = g\n      .plain(visualization.scheduleLength.toString())\n      .font({anchor: 'end'})\n      .attr({'font-family': null, 'alignment-baseline': 'hanging'})\n      .move(scalingFactor * visualization.scheduleLength, top);\n  rowBackgroundsGroup.after(finishLine);\n\n  g.move(0.5 + maxLabelWidth + 2 * SPACING, 0.5 + SPACING);\n  draw.size(drawWidth, Math.ceil(top + SPACING + lengthLabel.bbox().height));\n}\n\nfunction showAlert(title: string, message: string, alertKind: 'success' | 'warning'): void {\n  feedbackTitle.innerText = title;\n  feedbackMsg.innerText = message;\n  feedback.classList.remove(...ALERT_KINDS.map((otherAlertKind) => `alert-${otherAlertKind}`));\n  feedback.classList.add(`alert-${alertKind}`);\n  feedback.classList.toggle('show', true);\n}\n\nfunction hideAlert() {\n  feedback.classList.toggle('show', false);\n}\n\nasync function compute(...args: Parameters<typeof computeSchedule>): Promise<Schedule> {\n  if (separateThread.checked) {\n    return computeScheduleAsync(...args);\n  } else {\n    const result = computeSchedule(...args);\n    return isSchedulingFailure(result)\n        ? Promise.reject(result)\n        : Promise.resolve(result);\n  }\n}\n\nasync function computeAndVisualize(): Promise<void> {\n  let instance: SchedulingInstance;\n  try {\n    instance = JSON.parse(instanceInput.value);\n  } catch (syntaxError) {\n    showAlert('Parsing failed.', `The text field does not contain valid JSON. Problem: ${syntaxError.message}`,\n        'warning');\n    return;\n  }\n\n  let schedule: Schedule | SchedulingFailure;\n  try {\n    schedule = await compute(instance);\n  } catch (error) {\n    showAlert('Scheduling failed.',\n        `The JSON is probably not a valid scheduling instance. Problem (${error.name}): ${error.message}`, 'warning');\n    return;\n  }\n\n  if (isSchedulingFailure(schedule)) {\n    scheduleOutput.value = '';\n    showAlert('Scheduling failed.', schedule, 'warning');\n    return;\n  }\n\n  scheduleOutput.value = JSON.stringify(schedule, undefined, 2);\n  createSvg(svgRoot, computeVisualization(instance, schedule));\n  hideAlert();\n}\n\nfunction shareLink(): void {\n  const json: string = instanceInput.value;\n  window.location.replace(`#${SOURCE_PARAM_NAME}=${encodeURIComponent(json)}`);\n  hashFromShareLink = window.location.hash;\n  let decodedHash: string | undefined;\n  try {\n    decodedHash = decodeURIComponent(hashFromShareLink);\n  } catch (ignoredUriError) { /* ignored */ }\n  let title: string;\n  let message: string;\n  let alertKind: AlertKind;\n  if (decodedHash === undefined || decodedHash.slice(2 + SOURCE_PARAM_NAME.length) !== json) {\n    title = 'Sharing failed.';\n    message = 'Text buffer too large to share.';\n    alertKind = 'warning';\n  } else {\n    title = 'Sharable URL created.';\n    message = 'Shareable link now in address bar.';\n    alertKind = 'success';\n  }\n  showAlert(title, message, alertKind);\n}\n\nasync function loadFromHash(): Promise<void> {\n  // Ignore change of hash (once) if the hash is the one previously set in shareLink().\n  if (window.location.hash === hashFromShareLink) {\n    hashFromShareLink = '';\n    return;\n  }\n\n  const urlSearchParams = new URLSearchParams(window.location.hash.slice(1));\n  const queryParams = new Map<string, string>(urlSearchParams.entries());\n  const encodedJson: string | undefined = queryParams.get(SOURCE_PARAM_NAME);\n  if (encodedJson !== undefined) {\n    try {\n      instanceInput.value = decodeURIComponent(encodedJson);\n    } catch (ignoredUriError) {\n      showAlert('Invalid URL.', 'Cannot parse the given URL.', 'warning');\n      return;\n    }\n    await computeAndVisualize();\n  }\n}\n\n// Set up events\n\ndocument.getElementById('btnRefresh')!.onclick = computeAndVisualize;\ndocument.getElementById('btnShare')!.onclick = shareLink;\ndocument.querySelectorAll('button.close[data-dismiss=\"alert\"]').forEach((element: Element) => {\n  const alert: Element | null = element.closest('.alert[role=\"alert\"]');\n  const button = element as HTMLButtonElement;\n  if (alert !== null) {\n    button.onclick = () => {\n      alert.classList.toggle('show', false);\n    };\n  }\n});\nwindow.onhashchange = loadFromHash;\n\n\n// Initialization\n\nloadFromHash().finally();\n"]}